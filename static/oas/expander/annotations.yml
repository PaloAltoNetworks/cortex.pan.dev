# This file was generated by OpenAPIDocsIT::writeUpdatedOpenAPI at 2020-07-15T21:26:27.520Z. Do not modify.
openapi: 3.0.1
info:
  title: Annotations API
  description: API for interacting with Expander annotations
  termsOfService: https://www.paloaltonetworks.com/content/dam/pan/en_US/assets/pdf/legal/palo-alto-networks-end-user-license-agreement-eula.pdf
  contact:
    name: API Support
    url: https://docs.paloaltonetworks.com/cortex/cortex-xpanse/cortex-xpanse-user-guide/apis-and-integrations-main/expander-apis-and-integrations/expander-apis.html#expander-apis
    email: expanse-support@paloaltonetworks.com
  version: 3.0.0
servers:
  - url: https://expander.expanse.co
security:
  - Bearer: []
paths:
  /api/oauth2/RequestToken:
    post:
      tags:
        - Tokens
      summary: Get Access Token from Client Credentials
      description: "This route can be accessed with a `client_id` and `client_secret`\
          \ to generate a valid `access_token` to be used with the other Xpanse api\
          \ endpoints. For more information on how to retrieve client credentials, visit\
          \ the Xpanse [TechDocs](https://docs.paloaltonetworks.com/cortex/cortex-xpanse/cortex-xpanse-user-guide/apis-and-integrations-main/expander-apis-and-integrations/expander-apis.html#expander-apis).\
          \  \n\nExample: `Authorization: Bearer access_token`"
      operationId: getAccessToken
      requestBody:
        description: scope should be `scope-xpanse`, grant_type should be `client_credentials`
        content:
          application/json:
            schema:
              type: object
              properties:
                client_id:
                  type: string
                client_secret:
                  type: string
                scope:
                  type: string
                  example: scope-xpanse
                grant_type:
                  type: string
                  example: client_credentials
      responses:
        "200":
          description: |-
            Response field `access_token` can be used as the Bearer token in future requests to other Xpanse endpoints.

            Example: `Authorization: Bearer access_token`
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token:
                    type: string
                  token_type:
                    type: string
                  expires_in:
                    type: integer
                    example: 3599
      security:
        - ClientCredentials: []
      servers:
        - url: https://api.paloaltonetworks.com
  /api/v1/idToken/:
    get:
      tags:
        - Tokens
      summary: Get ID token from refresh token (Deprecated)
      description: |-
        This route can be accessed with an Xpanse-provided refresh
        token to generate a valid JWT Token to be used with the other api
        endpoints.

        Example: `Authorization: Bearer refreshtoken`
      operationId: getIdToken
      responses:
        "200":
          description: |-
            Response token can be used as JWT in future requests to other endpoints

            Example: `Authorization: JWT token`
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
      security:
        - RefreshToken-Deprecated: []
  /api/v3/annotations/tags:
    get:
      tags:
        - Tags
      summary: List all tags.
      description: List all tags.
      operationId: getTags
      parameters:
        - name: limit
          in: query
          description: Maximum page size limit.
          required: false
          schema:
            type: integer
            format: int32
            default: 100
        - name: pageToken
          in: query
          description: Page token used for pagination.
          required: false
          schema:
            type: string
        - name: id
          in: query
          description: Comma-separated string; Returns any assets with a tagId in the
            provided set.
          required: false
          schema:
            uniqueItems: true
            type: array
            items:
              type: string
              format: uuid
        - name: name
          in: query
          description: Comma-separated string; Returns any assets with a tagName in
            the provided set.
          required: false
          schema:
            uniqueItems: true
            type: array
            items:
              type: string
        - name: disabled
          in: query
          description: Boolean representing if the tag is currently disabled.
          required: false
          schema:
            type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageTag'
    post:
      tags:
        - Tags
      summary: Create a tag.
      description: Create a new tag. Tag names must be less than 128 characters and
        descriptions must be less than 512 characters. Attempting to create a tag
        that already exists will throw a 409 conflict error.
      operationId: createTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
        required: true
      responses:
        409:
          description: Conflict
        201:
          description: Created
          headers:
            Location:
              description: Path to created resource
              style: simple
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
  /api/v3/annotations/tags/{tagId}:
    get:
      tags:
        - Tags
      summary: Get one tag by id.
      description: Get one tag by id.
      operationId: getTagById
      parameters:
        - name: tagId
          in: path
          description: Tag id.
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
    put:
      tags:
        - Tags
      summary: Update tag by id.
      description: Update a tag by id. You can only update description and disabled
        fields. All other fields will be ignored.
      operationId: updateTagById
      parameters:
        - name: tagId
          in: path
          description: Tag id.
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
components:
  schemas:
    Tag:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        name:
          maxLength: 128
          minLength: 1
          type: string
        description:
          maxLength: 512
          minLength: 0
          type: string
        disabled:
          type: boolean
        created:
          type: string
          format: date-time
        modified:
          type: string
          format: date-time
    Meta:
      type: object
      properties:
        nextPageToken:
          type: string
        prevPageToken:
          type: string
    PageTag:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        pagination:
          $ref: '#/components/schemas/Pagination'
        meta:
          $ref: '#/components/schemas/Meta'
    Pagination:
      type: object
      properties:
        next:
          type: string
        prev:
          type: string
  securitySchemes:
    ClientCredentials:
      type: oauth2
      description: |-
        For more information on how to retrieve client credentials, visit the Xpanse [TechDocs](https://docs.paloaltonetworks.com/cortex/cortex-xpanse/cortex-xpanse-user-guide/apis-and-integrations-main/expander-apis-and-integrations/expander-apis.html#expander-apis). This is the preferred method for retrieving a JWT for Xpanse APIs. There will be significant customer communications and a lengthy migration period before refresh token support is removed in favor of the client credentials flow.

        Exchange a `client_id` and `client_secret` for an `access_token` (JWT) that can be passed to all Xpanse APIs. See [Get Access Token from Client Credentials](#operation/getAccessToken) for more info.
      flows:
        clientCredentials:
          tokenUrl: /api/oauth2/RequestToken
          scopes:
            scope-xpanse: access Xpanse APIs
    RefreshToken-Deprecated:
      type: apiKey
      description: |-
        Xpanse APIs continue to support this JWT retrieval method alongside the preferred client credentials flow. There will be significant customer communications and a lengthy migration period before refresh token support is removed in favor of the client credentials flow.

        Provide a valid Xpanse-provided refresh token to access `/api/v1/idToken/`. This route will generate a JWT token that can be used with the other api endpoints.

        Example: `Authorization: Bearer <refreshToken>`
      name: Authorization
      in: header
    Bearer:
      type: http
      description: |-
        To access Xpanse APIs, a valid access token (JWT) must be included in every request
        in the `Authorization` header, which is retrieved by going through the client credentials flow (preferred method of JWT retrieval).

        The value for this header should be `Bearer <access_token>`, where the token is the base64-encoded JSON Web Token returned as the `access_token` field in the client credentials flow.
      name: Authorization
      in: header
      scheme: bearer
      bearerFormat: JWT

