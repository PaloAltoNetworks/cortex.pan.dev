# This file was generated by OpenAPIDocsIT::writeUpdatedOpenAPI at 2020-06-02T20:52:45.352Z. Do not modify.
openapi: 3.0.1
info:
  title: Annotations API
  description: API for interacting with Expander annotations
  termsOfService: https://www.expanse.co/master-service-agreement/
  contact:
    name: API Support
    url: https://expander-support.expanse.co
    email: expander-support@expanseinc.com
  version: 3.0.0
servers:
- url: https://expander.expanse.co
security:
- JWT: []
paths:
  /api/v1/idToken/:
    get:
      tags:
      - Tokens
      summary: Get ID token
      description: |-
        This route can be accessed with an Expanse-provided refresh
        token to generate a valid JWT Token to be used with the other api
        endpoints.

        Example: `Authorization: Bearer refreshtoken`
      operationId: getIdToken
      responses:
        200:
          description: |-
            Response token can be used as JWT in future requests to other endpoints

            Example: `Authorization: JWT token`
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
      security:
      - Bearer: []
  /api/v3/annotations/tags:
    get:
      tags:
      - Tags
      summary: List all tags.
      description: List all tags.
      operationId: getTags
      parameters:
      - name: limit
        in: query
        description: Maximum page size limit.
        required: false
        schema:
          type: integer
          format: int32
          default: 100
      - name: pageToken
        in: query
        description: Page token used for pagination.
        required: false
        schema:
          type: string
      - name: id
        in: query
        description: Comma-separated string; Returns any assets with a tagId in the
          provided set.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
            format: uuid
      - name: name
        in: query
        description: Comma-separated string; Returns any assets with a tagName in
          the provided set.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: disabled
        in: query
        description: Boolean representing if the tag is currently disabled.
        required: false
        schema:
          type: boolean
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageTag'
    post:
      tags:
      - Tags
      summary: Create a tag.
      description: Create a new tag. Tag names must be less than 128 characters and
        descriptions must be less than 512 characters. Attempting to create a tag
        that already exists will throw a 409 conflict error.
      operationId: createTag
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
        required: true
      responses:
        201:
          description: Created
          headers:
            Location:
              description: Path to created resource
              style: simple
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        409:
          description: Conflict
  /api/v3/annotations/tags/{tagId}:
    get:
      tags:
      - Tags
      summary: Get one tag by id.
      description: Get one tag by id.
      operationId: getTagById
      parameters:
      - name: tagId
        in: path
        description: Tag id.
        required: true
        schema:
          type: string
          format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
    put:
      tags:
      - Tags
      summary: Update tag by id.
      description: Update a tag by id. You can only update description and disabled
        fields. All other fields will be ignored.
      operationId: updateTagById
      parameters:
      - name: tagId
        in: path
        description: Tag id.
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
        required: true
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
components:
  schemas:
    Tag:
      type: object
      properties:
        id:
          type: string
          format: uuid
        tenantId:
          type: string
          format: uuid
        name:
          maxLength: 128
          minLength: 1
          type: string
        description:
          maxLength: 512
          minLength: 0
          type: string
        disabled:
          type: boolean
        created:
          type: string
          format: date-time
        modified:
          type: string
          format: date-time
    Meta:
      type: object
      properties:
        nextPageToken:
          type: string
        prevPageToken:
          type: string
    PageTag:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
        pagination:
          $ref: '#/components/schemas/Pagination'
        meta:
          $ref: '#/components/schemas/Meta'
    Pagination:
      type: object
      properties:
        next:
          type: string
        prev:
          type: string
  securitySchemes:
    JWT:
      type: apiKey
      description: |-
        To access the API a valid JWT token must be included in every request
        in the ''Authorization'' header. A valid JWT token is generated by the
        API and returned via the `/api/v1/idToken/` route. The value for this header
        should be `JWT <token>`, where the token is the base64-encoded JSON Web
        Token.

        Example: `Authorization: JWT <token>`
      name: Authorization
      in: header
    Bearer:
      type: apiKey
      description: |-
        Provide a valid Expanse-provided refresh token to access `/api/v1/idToken/`.
        This route will generate a JWT token that can be used with the other api
        endpoints.

        Example: `Authorization: Bearer <refreshToken>`
      name: Authorization
      in: header
