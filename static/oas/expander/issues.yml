# This file was generated by OpenAPIDocsIT::writeUpdatedOpenAPI at 2021-11-02T00:20:43.654Z. Do not modify.
openapi: 3.0.1
info:
  title: Issues
  description: An API for interacting with Issues.
  termsOfService: https://www.paloaltonetworks.com/content/dam/pan/en_US/assets/pdf/legal/palo-alto-networks-end-user-license-agreement-eula.pdf
  contact:
    name: API Support
    url: https://docs.paloaltonetworks.com/cortex/cortex-xpanse/cortex-xpanse-user-guide/apis-and-integrations-main/expander-apis-and-integrations/expander-apis.html#expander-apis
    email: expanse-support@paloaltonetworks.com
  version: 2.0.0
servers:
- url: https://expander.expanse.co
security:
- JWT: []
paths:
  /api/v1/idToken/:
    get:
      tags:
      - Tokens
      summary: Get ID token
      description: |-
        This route can be accessed with an Expanse-provided refresh
        token to generate a valid JWT Token to be used with the other api
        endpoints.

        Example: `Authorization: Bearer refreshtoken`
      operationId: getIdToken
      responses:
        "200":
          description: |-
            Response token can be used as JWT in future requests to other endpoints

            Example: `Authorization: JWT token`
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
      security:
      - Bearer: []
  /api/v1/issues/assignees:
    get:
      tags:
      - Assignees
      summary: List available assignees
      description: Get a paginated list of users currently or recently assigned to
        Issues.
      operationId: getIssueAssignees
      parameters:
      - name: includeArchived
        in: query
        description: Include results that are archived. The default behavior is to
          exclude archived values.
        required: false
        schema:
          type: boolean
          default: false
      - name: limit
        in: query
        description: 'Returns at most this many results in a single api call (max:
          10,000).'
        required: false
        schema:
          type: integer
          format: int32
          default: 100
      - name: pageToken
        in: query
        description: Page token for pagination
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageAssignee'
  /api/v1/issues/businessUnits:
    get:
      tags:
      - BusinessUnits
      summary: List available business units
      description: Get a paginated list of available business units for Issues.
      operationId: getIssueBusinessUnits
      parameters:
      - name: limit
        in: query
        description: 'Returns at most this many results in a single api call (max:
          10,000).'
        required: false
        schema:
          type: integer
          format: int32
          default: 100
      - name: pageToken
        in: query
        description: Page token for pagination
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageBusinessUnit'
  /api/v1/issues/policies/count:
    get:
      tags:
      - Policies
      summary: Count policies
      description: Get a count of policies. Returns the total count of policies matching
        the provided filters, up to 10K.
      operationId: getPoliciesCount
      parameters:
      - name: contentSearch
        in: query
        description: Returns only results whose contents match the given query
        required: false
        schema:
          type: string
      - name: enabledStatus
        in: query
        description: Returns only results with enabled status matching the provided
          value.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: category
        in: query
        description: Comma-separated string; Returns only results whose category matches
          one of the given categories.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: priority
        in: query
        description: Comma-separated string; Returns only results whose priority matches
          one of the given values.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: assigneeUsername
        in: query
        description: Comma-separated string; Returns only results whose assignee's
          username matches one of the given usernames. Use 'Unassigned' to fetch issues
          that are not assigned to any user.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyCount'
  /api/v1/issues/policies/{policyId}:
    get:
      tags:
      - Policies
      summary: Get policy
      description: Get the details of a policy.
      operationId: getPolicyDetails
      parameters:
      - name: policyId
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
    put:
      tags:
      - Policies
      summary: Update policy
      description: Update a policy.
      operationId: updatePolicy
      parameters:
      - name: policyId
        in: path
        description: ID of the policy to be updated
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyUpdateRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policy'
  /api/v1/issues/policies:
    get:
      tags:
      - Policies
      summary: List Policies
      description: Get a paginated list of policies.
      operationId: getPolicies
      parameters:
      - name: limit
        in: query
        description: 'Returns at most this many results in a single api call (max:
          10,000).'
        required: false
        schema:
          type: integer
          format: int32
          default: 100
      - name: pageToken
        in: query
        description: Page token for pagination
        required: false
        schema:
          type: string
      - name: contentSearch
        in: query
        description: Returns only results whose contents match the given query
        required: false
        schema:
          type: string
      - name: sort
        in: query
        description: The field to use to sort the returned records. Prefix with '-'
          to reverse the normal sort order.
        required: false
        schema:
          enum:
          - issueTypeName
          - -issueTypeName
          - category
          - -category
          - issueTypeId
          - -issueTypeId
          - created
          - -created
          - modified
          - -modified
          - modifiedBy
          - -modifiedBy
          - priority
          - -priority
          - assigneeUsername
          - -assigneeUsername
          - enabledStatus
          - -enabledStatus
      - name: enabledStatus
        in: query
        description: Returns only results with enabled status matching the provided
          value.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: category
        in: query
        description: Comma-separated string; Returns only results whose category matches
          one of the given categories.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: priority
        in: query
        description: Comma-separated string; Returns only results whose priority matches
          one of the given values.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: assigneeUsername
        in: query
        description: Comma-separated string; Returns only results whose assignee's
          username matches one of the given usernames. Use 'Unassigned' to fetch issues
          that are not assigned to any user.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagePolicy'
  /api/v1/issues/issues:
    get:
      tags:
      - Issues
      summary: List Issues
      description: Get a paginated list of issues.
      operationId: getIssues
      parameters:
      - name: limit
        in: query
        description: 'Returns at most this many results in a single api call (max:
          10,000).'
        required: false
        schema:
          type: integer
          format: int32
          default: 100
      - name: pageToken
        in: query
        description: Page token for pagination
        required: false
        schema:
          type: string
      - name: contentSearch
        in: query
        description: Returns only results whose contents match the given query
        required: false
        schema:
          type: string
      - name: providerId
        in: query
        description: Comma-separated string; Returns only results that were found
          on the given providers. If not set, results will include anything regardless
          of provider status.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: providerName
        in: query
        description: Comma-separated string; Returns only results that were found
          on the given providers. If not set, results will include anything regardless
          of provider status.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: businessUnitId
        in: query
        description: 'Comma-separated string; Returns only results whose Business
          Unit''s ID falls in the provided list. NOTE: If omitted, API will return
          results for all Business Units the user has permissions to view.'
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
            format: uuid
      - name: businessUnitName
        in: query
        description: 'Comma-separated string; Returns only results whose Business
          Unit''s name falls in the provided list. NOTE: If omitted, API will return
          results for all Business Units the user has permissions to view.'
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: assigneeUsername
        in: query
        description: Comma-separated string; Returns only results whose assignee's
          username matches one of the given usernames. Use 'Unassigned' to fetch issues
          that are not assigned to any user.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: issueTypeId
        in: query
        description: Comma-separated string; Returns only results whose issue type
          name matches one of the given types.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: issueTypeName
        in: query
        description: Comma-separated string; Returns only results whose issue type
          name matches one of the given types.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: category
        in: query
        description: Comma-separated string; Returns only results whose category matches
          one of the given categories.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: inetSearch
        in: query
        description: Search for results in a given IP/CIDR block using a single IP
          (d.d.d.d), a dashed IP range (d.d.d.d-d.d.d.d), a CIDR block (d.d.d.d/m),
          a partial CIDR (d.d.), or a wildcard (d.d.*). Returns results whose identifier
          includes an IP matching the query.
        required: false
        schema:
          type: string
      - name: domainSearch
        in: query
        description: Search for a a given domain value via substring match. Returns
          results whose identifier includes a domain matching the query. Surround
          with quotation marks for an exact search.
        required: false
        schema:
          type: string
      - name: portNumber
        in: query
        description: Comma-separated string; Returns only results whose identifier
          includes one of the given port numbers.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: integer
            format: int32
      - name: progressStatus
        in: query
        description: Comma-separated string; Returns only results whose progress status
          matches one of the given values.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: activityStatus
        in: query
        description: Comma-separated string; Returns only results whose activity status
          matches one of the given values.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: priority
        in: query
        description: Comma-separated string; Returns only results whose priority matches
          one of the given values.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: tagName
        in: query
        description: Comma-separated string; Returns only results that are associated
          with the provided tag names.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: tagId
        in: query
        description: Comma-separated string; Returns only results that are associated
          with the provided tag IDs.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
            format: uuid
      - name: createdAfter
        in: query
        description: Returns only results created after the provided timestamp (YYYY-MM-DDTHH:MM:SSZ).
        required: false
        schema:
          type: string
          format: date-time
      - name: createdBefore
        in: query
        description: Returns only results created before the provided timestamp (YYYY-MM-DDTHH:MM:SSZ).
        required: false
        schema:
          type: string
          format: date-time
      - name: modifiedAfter
        in: query
        description: Returns only results modified after the provided timestamp (YYYY-MM-DDTHH:MM:SSZ).
        required: false
        schema:
          type: string
          format: date-time
      - name: modifiedBefore
        in: query
        description: Returns only results modified before the provided timestamp (YYYY-MM-DDTHH:MM:SSZ).
        required: false
        schema:
          type: string
          format: date-time
      - name: countryCode
        in: query
        description: Comma-separated string of ISO-3166 two character country codes;
          Returns any assets with an IP located in a country in the provided set.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: cloudManagementStatus
        in: query
        description: Comma-separated string; Returns only results whose cloud management
          status matches one of the given values.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: networkType
        in: query
        description: Comma-separated string; Returns only results whose network type
          matches one of the given values.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: providerAccountId
        in: query
        description: Comma-separated string; Returns only results linked to an asset
          from one of the given provider account IDs.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: sort
        in: query
        description: The field to use to sort the returned records. Prefix with '-'
          to reverse the normal sort order.
        required: false
        schema:
          enum:
          - id
          - -id
          - created
          - -created
          - modified
          - -modified
          - priority
          - -priority
          - progressStatus
          - -progressStatus
          - activityStatus
          - -activityStatus
          - headline
          - -headline
          - category
          - -category
          - latestEvidenceTimestamp
          - -latestEvidenceTimestamp
          - initialEvidenceTimestamp
          - -initialEvidenceTimestamp
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageIssue'
  /api/v1/issues/issues/counts:
    get:
      tags:
      - Issues
      summary: Get issue counts for all values of a field
      description: Get bulk counts of issues. Returns the counts of issues matching
        the provided filters for each value of the fields specified by the include
        parameter, up to 100 per value. At this time, the only supported values for
        the include parameter are issueTypeId and priority. Filters for the field
        specified by the include parameter are ignored when computing counts for that
        field.
      operationId: getBulkIssueCounts
      parameters:
      - name: contentSearch
        in: query
        description: Returns only results whose contents match the given query
        required: false
        schema:
          type: string
      - name: providerId
        in: query
        description: Comma-separated string; Returns only results that were found
          on the given providers. If not set, results will include anything regardless
          of provider status.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: providerName
        in: query
        description: Comma-separated string; Returns only results that were found
          on the given providers. If not set, results will include anything regardless
          of provider status.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: businessUnitId
        in: query
        description: 'Comma-separated string; Returns only results whose Business
          Unit''s ID falls in the provided list. NOTE: If omitted, API will return
          results for all Business Units the user has permissions to view.'
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
            format: uuid
      - name: businessUnitName
        in: query
        description: 'Comma-separated string; Returns only results whose Business
          Unit''s name falls in the provided list. NOTE: If omitted, API will return
          results for all Business Units the user has permissions to view.'
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: assigneeUsername
        in: query
        description: Comma-separated string; Returns only results whose assignee's
          username matches one of the given usernames. Use 'Unassigned' to fetch issues
          that are not assigned to any user.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: issueTypeId
        in: query
        description: Comma-separated string; Returns only results whose issue type
          name matches one of the given types.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: issueTypeName
        in: query
        description: Comma-separated string; Returns only results whose issue type
          name matches one of the given types.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: category
        in: query
        description: Comma-separated string; Returns only results whose category matches
          one of the given categories.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: inetSearch
        in: query
        description: Search for results in a given IP/CIDR block using a single IP
          (d.d.d.d), a dashed IP range (d.d.d.d-d.d.d.d), a CIDR block (d.d.d.d/m),
          a partial CIDR (d.d.), or a wildcard (d.d.*). Returns results whose identifier
          includes an IP matching the query.
        required: false
        schema:
          type: string
      - name: domainSearch
        in: query
        description: Search for a a given domain value via substring match. Returns
          results whose identifier includes a domain matching the query. Surround
          with quotation marks for an exact search.
        required: false
        schema:
          type: string
      - name: portNumber
        in: query
        description: Comma-separated string; Returns only results whose identifier
          includes one of the given port numbers.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: integer
            format: int32
      - name: progressStatus
        in: query
        description: Comma-separated string; Returns only results whose progress status
          matches one of the given values.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: activityStatus
        in: query
        description: Comma-separated string; Returns only results whose activity status
          matches one of the given values.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: priority
        in: query
        description: Comma-separated string; Returns only results whose priority matches
          one of the given values.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: tagName
        in: query
        description: Comma-separated string; Returns only results that are associated
          with the provided tag names.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: tagId
        in: query
        description: Comma-separated string; Returns only results that are associated
          with the provided tag IDs.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
            format: uuid
      - name: createdAfter
        in: query
        description: Returns only results created after the provided timestamp (YYYY-MM-DDTHH:MM:SSZ).
        required: false
        schema:
          type: string
          format: date-time
      - name: createdBefore
        in: query
        description: Returns only results created before the provided timestamp (YYYY-MM-DDTHH:MM:SSZ).
        required: false
        schema:
          type: string
          format: date-time
      - name: modifiedAfter
        in: query
        description: Returns only results modified after the provided timestamp (YYYY-MM-DDTHH:MM:SSZ).
        required: false
        schema:
          type: string
          format: date-time
      - name: modifiedBefore
        in: query
        description: Returns only results modified before the provided timestamp (YYYY-MM-DDTHH:MM:SSZ).
        required: false
        schema:
          type: string
          format: date-time
      - name: countryCode
        in: query
        description: Comma-separated string of ISO-3166 two character country codes;
          Returns any assets with an IP located in a country in the provided set.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: cloudManagementStatus
        in: query
        description: Comma-separated string; Returns only results whose cloud management
          status matches one of the given values.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: networkType
        in: query
        description: Comma-separated string; Returns only results whose network type
          matches one of the given values.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: providerAccountId
        in: query
        description: Comma-separated string; Returns only results linked to an asset
          from one of the given provider account IDs.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: include
        in: query
        description: Comma-separated string; Include counts for all possible values
          of the provided fields.
        required: true
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkCounts'
  /api/v1/issues/issues/count:
    get:
      tags:
      - Issues
      summary: Count issues
      description: Get a count of issues. Returns the total count of issues matching
        the provided filters, up to 10K.
      operationId: getIssuesCount
      parameters:
      - name: contentSearch
        in: query
        description: Returns only results whose contents match the given query
        required: false
        schema:
          type: string
      - name: providerId
        in: query
        description: Comma-separated string; Returns only results that were found
          on the given providers. If not set, results will include anything regardless
          of provider status.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: providerName
        in: query
        description: Comma-separated string; Returns only results that were found
          on the given providers. If not set, results will include anything regardless
          of provider status.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: businessUnitId
        in: query
        description: 'Comma-separated string; Returns only results whose Business
          Unit''s ID falls in the provided list. NOTE: If omitted, API will return
          results for all Business Units the user has permissions to view.'
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
            format: uuid
      - name: businessUnitName
        in: query
        description: 'Comma-separated string; Returns only results whose Business
          Unit''s name falls in the provided list. NOTE: If omitted, API will return
          results for all Business Units the user has permissions to view.'
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: assigneeUsername
        in: query
        description: Comma-separated string; Returns only results whose assignee's
          username matches one of the given usernames. Use 'Unassigned' to fetch issues
          that are not assigned to any user.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: issueTypeId
        in: query
        description: Comma-separated string; Returns only results whose issue type
          name matches one of the given types.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: issueTypeName
        in: query
        description: Comma-separated string; Returns only results whose issue type
          name matches one of the given types.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: category
        in: query
        description: Comma-separated string; Returns only results whose category matches
          one of the given categories.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: inetSearch
        in: query
        description: Search for results in a given IP/CIDR block using a single IP
          (d.d.d.d), a dashed IP range (d.d.d.d-d.d.d.d), a CIDR block (d.d.d.d/m),
          a partial CIDR (d.d.), or a wildcard (d.d.*). Returns results whose identifier
          includes an IP matching the query.
        required: false
        schema:
          type: string
      - name: domainSearch
        in: query
        description: Search for a a given domain value via substring match. Returns
          results whose identifier includes a domain matching the query. Surround
          with quotation marks for an exact search.
        required: false
        schema:
          type: string
      - name: portNumber
        in: query
        description: Comma-separated string; Returns only results whose identifier
          includes one of the given port numbers.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: integer
            format: int32
      - name: progressStatus
        in: query
        description: Comma-separated string; Returns only results whose progress status
          matches one of the given values.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: activityStatus
        in: query
        description: Comma-separated string; Returns only results whose activity status
          matches one of the given values.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: priority
        in: query
        description: Comma-separated string; Returns only results whose priority matches
          one of the given values.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: tagName
        in: query
        description: Comma-separated string; Returns only results that are associated
          with the provided tag names.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: tagId
        in: query
        description: Comma-separated string; Returns only results that are associated
          with the provided tag IDs.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
            format: uuid
      - name: createdAfter
        in: query
        description: Returns only results created after the provided timestamp (YYYY-MM-DDTHH:MM:SSZ).
        required: false
        schema:
          type: string
          format: date-time
      - name: createdBefore
        in: query
        description: Returns only results created before the provided timestamp (YYYY-MM-DDTHH:MM:SSZ).
        required: false
        schema:
          type: string
          format: date-time
      - name: modifiedAfter
        in: query
        description: Returns only results modified after the provided timestamp (YYYY-MM-DDTHH:MM:SSZ).
        required: false
        schema:
          type: string
          format: date-time
      - name: modifiedBefore
        in: query
        description: Returns only results modified before the provided timestamp (YYYY-MM-DDTHH:MM:SSZ).
        required: false
        schema:
          type: string
          format: date-time
      - name: countryCode
        in: query
        description: Comma-separated string of ISO-3166 two character country codes;
          Returns any assets with an IP located in a country in the provided set.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: cloudManagementStatus
        in: query
        description: Comma-separated string; Returns only results whose cloud management
          status matches one of the given values.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: networkType
        in: query
        description: Comma-separated string; Returns only results whose network type
          matches one of the given values.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: providerAccountId
        in: query
        description: Comma-separated string; Returns only results linked to an asset
          from one of the given provider account IDs.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueCount'
  /api/v1/issues/issues/bulk:
    post:
      tags:
      - Issues
      summary: Update issues in bulk
      description: Update issues in bulk up to 10K. Also creates updates for the issues.
      operationId: bulkUpdateIssues
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BulkRequestBulkIssueUpdate'
        required: true
      responses:
        "200":
          description: default response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BulkResponseBulkStatusBulkIssueUpdate'
  /api/v1/issues/issues/{issueId}:
    get:
      tags:
      - Issues
      summary: Get issue
      description: Get the details of an issue.
      operationId: getIssueDetails
      parameters:
      - name: issueId
        in: path
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Issue'
  /api/v1/issues/issues/csv:
    get:
      tags:
      - Issues
      summary: Get a CSV download of issues
      description: Get a CSV download of all issues matching provided filter parameters.
      operationId: getIssuesCsv
      parameters:
      - name: limit
        in: query
        required: false
        schema:
          type: integer
          format: int32
          default: 200000
      - name: contentSearch
        in: query
        description: Returns only results whose contents match the given query
        required: false
        schema:
          type: string
      - name: providerId
        in: query
        description: Comma-separated string; Returns only results that were found
          on the given providers. If not set, results will include anything regardless
          of provider status.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: providerName
        in: query
        description: Comma-separated string; Returns only results that were found
          on the given providers. If not set, results will include anything regardless
          of provider status.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: businessUnitId
        in: query
        description: 'Comma-separated string; Returns only results whose Business
          Unit''s ID falls in the provided list. NOTE: If omitted, API will return
          results for all Business Units the user has permissions to view.'
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
            format: uuid
      - name: businessUnitName
        in: query
        description: 'Comma-separated string; Returns only results whose Business
          Unit''s name falls in the provided list. NOTE: If omitted, API will return
          results for all Business Units the user has permissions to view.'
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: assigneeUsername
        in: query
        description: Comma-separated string; Returns only results whose assignee's
          username matches one of the given usernames. Use 'Unassigned' to fetch issues
          that are not assigned to any user.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: issueTypeId
        in: query
        description: Comma-separated string; Returns only results whose issue type
          name matches one of the given types.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: issueTypeName
        in: query
        description: Comma-separated string; Returns only results whose issue type
          name matches one of the given types.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: category
        in: query
        description: Comma-separated string; Returns only results whose category matches
          one of the given categories.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: inetSearch
        in: query
        description: Search for results in a given IP/CIDR block using a single IP
          (d.d.d.d), a dashed IP range (d.d.d.d-d.d.d.d), a CIDR block (d.d.d.d/m),
          a partial CIDR (d.d.), or a wildcard (d.d.*). Returns results whose identifier
          includes an IP matching the query.
        required: false
        schema:
          type: string
      - name: domainSearch
        in: query
        description: Search for a a given domain value via substring match. Returns
          results whose identifier includes a domain matching the query. Surround
          with quotation marks for an exact search.
        required: false
        schema:
          type: string
      - name: portNumber
        in: query
        description: Comma-separated string; Returns only results whose identifier
          includes one of the given port numbers.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: integer
            format: int32
      - name: progressStatus
        in: query
        description: Comma-separated string; Returns only results whose progress status
          matches one of the given values.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: activityStatus
        in: query
        description: Comma-separated string; Returns only results whose activity status
          matches one of the given values.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: priority
        in: query
        description: Comma-separated string; Returns only results whose priority matches
          one of the given values.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: tagName
        in: query
        description: Comma-separated string; Returns only results that are associated
          with the provided tag names.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: tagId
        in: query
        description: Comma-separated string; Returns only results that are associated
          with the provided tag IDs.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
            format: uuid
      - name: createdAfter
        in: query
        description: Returns only results created after the provided timestamp (YYYY-MM-DDTHH:MM:SSZ).
        required: false
        schema:
          type: string
          format: date-time
      - name: createdBefore
        in: query
        description: Returns only results created before the provided timestamp (YYYY-MM-DDTHH:MM:SSZ).
        required: false
        schema:
          type: string
          format: date-time
      - name: modifiedAfter
        in: query
        description: Returns only results modified after the provided timestamp (YYYY-MM-DDTHH:MM:SSZ).
        required: false
        schema:
          type: string
          format: date-time
      - name: modifiedBefore
        in: query
        description: Returns only results modified before the provided timestamp (YYYY-MM-DDTHH:MM:SSZ).
        required: false
        schema:
          type: string
          format: date-time
      - name: countryCode
        in: query
        description: Comma-separated string of ISO-3166 two character country codes;
          Returns any assets with an IP located in a country in the provided set.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: cloudManagementStatus
        in: query
        description: Comma-separated string; Returns only results whose cloud management
          status matches one of the given values.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: networkType
        in: query
        description: Comma-separated string; Returns only results whose network type
          matches one of the given values.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: providerAccountId
        in: query
        description: Comma-separated string; Returns only results linked to an asset
          from one of the given provider account IDs.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: filename
        in: query
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            text/csv:
              schema:
                $ref: '#/components/schemas/FileDownloadResponseEntityCsvIssue'
  /api/v1/issues/issueTypes:
    get:
      tags:
      - IssueTypes
      summary: List available issue types
      description: Get a paginated list of available issue types for Issues.
      operationId: getIssueTypes
      parameters:
      - name: includeArchived
        in: query
        description: Include results that are archived. The default behavior is to
          exclude archived values.
        required: false
        schema:
          type: boolean
          default: false
      - name: limit
        in: query
        description: 'Returns at most this many results in a single api call (max:
          10,000).'
        required: false
        schema:
          type: integer
          format: int32
          default: 100
      - name: pageToken
        in: query
        description: Page token for pagination
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageIssueType'
  /api/v1/issues/issues/{issueId}/updates:
    get:
      tags:
      - Issues
      summary: Get updates for an issue
      description: Get a paginated list of updates for an issue.
      operationId: getIssueUpdates
      parameters:
      - name: issueId
        in: path
        description: ID of the Issue
        required: true
        schema:
          type: string
          format: uuid
      - name: limit
        in: query
        description: 'Returns at most this many results in a single api call (max:
          10,000).'
        required: false
        schema:
          type: integer
          format: int32
          default: 100
      - name: pageToken
        in: query
        description: Page token for pagination
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageIssueUpdate'
    post:
      tags:
      - Issues
      summary: Make update
      description: Make an update to an issue. Requires a 'value' and an 'updateType'.
      operationId: createIssueUpdate
      parameters:
      - name: issueId
        in: path
        description: ID of the Issue to be updated
        required: true
        schema:
          type: string
          format: uuid
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IssueUpdateRequest'
        required: true
      responses:
        "201":
          description: Created
          headers:
            Location:
              description: Path to created resource
              style: simple
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueUpdate'
  /api/v1/issues/updates:
    get:
      tags:
      - Issues
      summary: List Updates
      description: Get a paginated list of updates.
      operationId: getAllIssueUpdates
      parameters:
      - name: limit
        in: query
        description: 'Returns at most this many results in a single api call (max:
          10,000).'
        required: false
        schema:
          type: integer
          format: int32
          default: 100
      - name: pageToken
        in: query
        description: Page token for pagination
        required: false
        schema:
          type: string
      - name: include
        in: query
        description: Comma-separated string; Include the provided fields as part of
          the serialized result.
        required: false
        schema:
          uniqueItems: true
          type: array
          items:
            type: string
      - name: createdAfter
        in: query
        description: Returns only results created after the provided timestamp (YYYY-MM-DDTHH:MM:SSZ).
        required: false
        schema:
          type: string
          format: date-time
      - name: createdBefore
        in: query
        description: Returns only results created before the provided timestamp (YYYY-MM-DDTHH:MM:SSZ).
        required: false
        schema:
          type: string
          format: date-time
      - name: sort
        in: query
        description: The field to use to sort the returned records. Prefix with '-'
          to reverse the normal sort order.
        required: false
        schema:
          enum:
          - created
          - -created
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageIssueUpdateEntry'
  /api/v1/issues/issues/{issueId}/updates/{updateId}:
    get:
      tags:
      - Issues
      summary: Get an Issue Update by Id
      description: Get details of an Issue update.
      operationId: getIssueUpdateDetails
      parameters:
      - name: issueId
        in: path
        description: ID of the Issue
        required: true
        schema:
          type: string
          format: uuid
      - name: updateId
        in: path
        description: ID of the Issue Update
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IssueUpdate'
  /api/v1/issues/policyOptions:
    get:
      tags:
      - PolicyOptions
      summary: Retrieves policy options
      description: Retrieves policy options for the user's assigned tenant.
      operationId: getPolicyOptions
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyOptions'
    put:
      tags:
      - PolicyOptions
      summary: Update global policy options
      description: Update global policy options for the user's Expander instance.
      operationId: updateOrCreatePolicyOptions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PolicyOptionsCreateOrUpdateRequest'
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PolicyOptions'
  /api/v1/issues/providers:
    get:
      tags:
      - Providers
      summary: List available cloud providers
      description: Get a paginated list of available cloud providers for Issues.
      operationId: getIssueProviders
      parameters:
      - name: limit
        in: query
        description: 'Returns at most this many results in a single api call (max:
          10,000).'
        required: false
        schema:
          type: integer
          format: int32
          default: 100
      - name: pageToken
        in: query
        description: Page token for pagination
        required: false
        schema:
          type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageProvider'
components:
  schemas:
    Assignee:
      required:
      - archived
      - username
      type: object
      properties:
        username:
          type: string
        archived:
          type: boolean
    Meta:
      type: object
      properties:
        nextPageToken:
          type: string
        prevPageToken:
          type: string
    PageAssignee:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Assignee'
        pagination:
          $ref: '#/components/schemas/Pagination'
        meta:
          $ref: '#/components/schemas/Meta'
    Pagination:
      type: object
      properties:
        next:
          type: string
        prev:
          type: string
    BusinessUnit:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    PageBusinessUnit:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/BusinessUnit'
        pagination:
          $ref: '#/components/schemas/Pagination'
        meta:
          $ref: '#/components/schemas/Meta'
    PolicyCount:
      type: object
      properties:
        overflow:
          type: boolean
        count:
          type: integer
          format: int32
    PolicyUpdateRequest:
      required:
      - assigneeUsername
      - enabledStatus
      - priority
      type: object
      properties:
        assigneeUsername:
          type: string
        priority:
          type: string
        enabledStatus:
          type: string
    Policy:
      type: object
      properties:
        issueTypeId:
          type: string
        issueTypeName:
          type: string
        assigneeUsername:
          type: string
        category:
          type: string
        knowledgeBaseLink:
          type: string
        description:
          type: string
        created:
          type: string
          format: date-time
        priority:
          type: string
        enabledStatus:
          type: string
        modified:
          type: string
          format: date-time
        modifiedBy:
          type: string
    PagePolicy:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Policy'
        pagination:
          $ref: '#/components/schemas/Pagination'
        meta:
          $ref: '#/components/schemas/Meta'
    Annotations:
      required:
      - tags
      type: object
      properties:
        tags:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/TagReference'
    AssetReference:
      required:
      - assetKey
      - assetType
      - displayName
      - id
      - referenceReason
      - sourceDetails
      type: object
      properties:
        id:
          type: string
          format: uuid
        assetKey:
          type: string
        assetType:
          type: string
        displayName:
          type: string
        referenceReason:
          $ref: '#/components/schemas/ReferenceReason'
        sourceDetails:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/SourceReference'
    Certificate:
      required:
      - id
      - md5Fingerprint
      - md5Hash
      - pemSha1
      - pemSha256
      - sha1Fingerprint
      - sha256Fingerprint
      type: object
      properties:
        id:
          type: string
          format: uuid
        md5Hash:
          type: string
        issuer:
          type: string
        issuerAlternativeNames:
          type: string
        issuerCountry:
          type: string
        issuerEmail:
          type: string
        issuerLocality:
          type: string
        issuerName:
          type: string
        issuerOrg:
          type: string
        formattedIssuerOrg:
          type: string
        issuerOrgUnit:
          type: string
        issuerState:
          type: string
        publicKey:
          type: string
        publicKeyAlgorithm:
          type: string
        publicKeyRsaExponent:
          type: integer
          format: int64
        signatureAlgorithm:
          type: string
        subject:
          type: string
        subjectAlternativeNames:
          type: string
        subjectCountry:
          type: string
        subjectEmail:
          type: string
        subjectLocality:
          type: string
        subjectName:
          type: string
        subjectOrg:
          type: string
        subjectOrgUnit:
          type: string
        subjectState:
          type: string
        serialNumber:
          type: string
        validNotBefore:
          type: string
        validNotAfter:
          type: string
        version:
          type: string
        publicKeyBits:
          type: integer
          format: int32
        pemSha256:
          type: string
        pemSha1:
          type: string
        publicKeyModulus:
          type: string
        publicKeySpki:
          type: string
        sha1Fingerprint:
          type: string
        sha256Fingerprint:
          type: string
        md5Fingerprint:
          type: string
      nullable: true
    CloudManagementStatus:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    Evidence:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
        evidenceType:
          type: string
      description: Possibilities are ScanEvidence, AssetEvidence, NoEvidence, and
        StringEvidence
    Issue:
      type: object
      properties:
        issueType:
          $ref: '#/components/schemas/IssueType'
        id:
          type: string
          format: uuid
        created:
          type: string
          format: date-time
        modified:
          type: string
          format: date-time
        category:
          type: string
        priority:
          type: string
        businessUnits:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/BusinessUnit'
        assets:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/AssetReference'
        providers:
          uniqueItems: true
          type: array
          items:
            $ref: '#/components/schemas/Provider'
        annotations:
          $ref: '#/components/schemas/Annotations'
        ip:
          type: string
          format: inet
          nullable: true
        portNumber:
          type: integer
          format: int32
          nullable: true
        portProtocol:
          type: string
          nullable: true
        certificate:
          $ref: '#/components/schemas/Certificate'
        domain:
          type: string
          nullable: true
        helpText:
          type: string
        headline:
          type: string
        assigneeUsername:
          type: string
        progressStatus:
          type: string
        activityStatus:
          type: string
        cloudManagementStatus:
          $ref: '#/components/schemas/CloudManagementStatus'
        networkType:
          $ref: '#/components/schemas/NetworkType'
        initialEvidence:
          $ref: '#/components/schemas/Evidence'
        latestEvidence:
          $ref: '#/components/schemas/Evidence'
    IssueType:
      required:
      - archived
      - id
      - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        archived:
          type: boolean
    NetworkType:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    PageIssue:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Issue'
        pagination:
          $ref: '#/components/schemas/Pagination'
        meta:
          $ref: '#/components/schemas/Meta'
    Provider:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    ReferenceReason:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: string
        name:
          type: string
    SourceReference:
      required:
      - name
      - value
      type: object
      properties:
        name:
          type: string
        value:
          uniqueItems: true
          type: array
          items:
            type: string
    TagReference:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
    BulkCount:
      required:
      - count
      - fieldName
      - fieldValue
      - overflow
      type: object
      properties:
        fieldName:
          type: string
        fieldValue:
          type: string
        overflow:
          type: boolean
        count:
          type: integer
          format: int32
    BulkCounts:
      required:
      - counts
      type: object
      properties:
        counts:
          type: array
          items:
            $ref: '#/components/schemas/BulkCount'
    IssueCount:
      type: object
      properties:
        overflow:
          type: boolean
        count:
          type: integer
          format: int32
    BulkIssueUpdate:
      required:
      - issueId
      - operationType
      - updateRequest
      type: object
      properties:
        issueId:
          type: string
          format: uuid
        operationType:
          type: string
        updateRequest:
          $ref: '#/components/schemas/IssueUpdateRequest'
    BulkRequestBulkIssueUpdate:
      required:
      - operations
      type: object
      properties:
        operations:
          type: array
          items:
            $ref: '#/components/schemas/BulkIssueUpdate'
    IssueUpdateRequest:
      required:
      - updateType
      - value
      type: object
      properties:
        updateType:
          type: string
          enum:
          - Assignee
          - Comment
          - Priority
          - ProgressStatus
        value:
          type: string
    BulkResponseBulkStatusBulkIssueUpdate:
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/BulkResponseMeta'
        data:
          type: array
          items:
            $ref: '#/components/schemas/BulkResponseItemBulkStatusBulkIssueUpdate'
    BulkResponseItemBulkStatusBulkIssueUpdate:
      type: object
      properties:
        status:
          type: string
        operation:
          $ref: '#/components/schemas/BulkIssueUpdate'
        error:
          $ref: '#/components/schemas/ErrorMessage'
    BulkResponseMeta:
      type: object
      properties:
        failureCount:
          type: integer
          format: int32
    ErrorMessage:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
    CsvField:
      type: object
      properties:
        fieldPath:
          type: string
        headerName:
          type: string
        converter:
          type: object
    FileDownloadResponseEntityCsvIssue:
      type: object
      properties:
        data:
          type: object
        filename:
          type: string
        fieldMappings:
          type: array
          items:
            $ref: '#/components/schemas/CsvField'
    PageIssueType:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/IssueType'
        pagination:
          $ref: '#/components/schemas/Pagination'
        meta:
          $ref: '#/components/schemas/Meta'
    IssueUpdate:
      type: object
      properties:
        id:
          type: string
          format: uuid
        updateType:
          type: string
        value:
          type: string
        previousValue:
          type: string
        user:
          $ref: '#/components/schemas/User'
        created:
          type: string
          format: date-time
    PageIssueUpdate:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/IssueUpdate'
        pagination:
          $ref: '#/components/schemas/Pagination'
        meta:
          $ref: '#/components/schemas/Meta'
    User:
      required:
      - username
      type: object
      properties:
        username:
          type: string
    IssueUpdateEntry:
      type: object
      properties:
        update:
          $ref: '#/components/schemas/IssueUpdate'
        issue:
          $ref: '#/components/schemas/Issue'
    PageIssueUpdateEntry:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/IssueUpdateEntry'
        pagination:
          $ref: '#/components/schemas/Pagination'
        meta:
          $ref: '#/components/schemas/Meta'
    PolicyOptions:
      required:
      - defaultPolicyEnabledStatus
      type: object
      properties:
        defaultPolicyEnabledStatus:
          type: string
    PolicyOptionsCreateOrUpdateRequest:
      required:
      - defaultPolicyEnabledStatus
      type: object
      properties:
        defaultPolicyEnabledStatus:
          type: string
    PageProvider:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Provider'
        pagination:
          $ref: '#/components/schemas/Pagination'
        meta:
          $ref: '#/components/schemas/Meta'
  securitySchemes:
    JWT:
      type: apiKey
      description: |-
        To access the API a valid JWT token must be included in every request
        in the ''Authorization'' header. A valid JWT token is generated by the
        API and returned via the `/api/v1/idToken/` route. The value for this header
        should be `JWT <token>`, where the token is the base64-encoded JSON Web
        Token.

        Example: `Authorization: JWT <token>`
      name: Authorization
      in: header
    Bearer:
      type: apiKey
      description: |-
        Provide a valid Expanse-provided refresh token to access `/api/v1/idToken/`.
        This route will generate a JWT token that can be used with the other api
        endpoints.

        Example: `Authorization: Bearer <refreshToken>`
      name: Authorization
      in: header