"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.fileSha = exports.pullRequestCommits = exports.tree = exports.commitTree = exports.pullRequestAndBranch = exports.pullRequest = exports.repository = exports.branch = exports.unpublishedPrBranches = exports.files = exports.statues = exports.unpublishedBranchFile = exports.blob = exports.user = exports.repoPermission = void 0;

var _graphqlTag = _interopRequireDefault(require("graphql-tag"));

var fragments = _interopRequireWildcard(require("./fragments"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _templateObject15() {
  const data = _taggedTemplateLiteral(["\n  query fileSha($owner: String!, $name: String!, $expression: String!) {\n    repository(owner: $owner, name: $name) {\n      ...RepositoryParts\n      file: object(expression: $expression) {\n        ...ObjectParts\n      }\n    }\n  }\n  ", "\n  ", "\n"]);

  _templateObject15 = function _templateObject15() {
    return data;
  };

  return data;
}

function _templateObject14() {
  const data = _taggedTemplateLiteral(["\n  query pullRequestCommits($owner: String!, $name: String!, $number: Int!) {\n    repository(owner: $owner, name: $name) {\n      ...RepositoryParts\n      pullRequest(number: $number) {\n        id\n        commits(last: 100) {\n          nodes {\n            id\n            commit {\n              ...ObjectParts\n              parents(last: 100) {\n                nodes {\n                  ...ObjectParts\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  ", "\n  ", "\n"]);

  _templateObject14 = function _templateObject14() {
    return data;
  };

  return data;
}

function _templateObject13() {
  const data = _taggedTemplateLiteral(["\n  query tree($owner: String!, $name: String!, $sha: GitObjectID!) {\n    repository(owner: $owner, name: $name) {\n      ...RepositoryParts\n      tree: object(oid: $sha) {\n        ...ObjectParts\n        ... on Tree {\n          entries {\n            ...TreeEntryParts\n          }\n        }\n      }\n    }\n  }\n  ", "\n  ", "\n  ", "\n"]);

  _templateObject13 = function _templateObject13() {
    return data;
  };

  return data;
}

function _templateObject12() {
  const data = _taggedTemplateLiteral(["\n  query commitTree($owner: String!, $name: String!, $sha: GitObjectID!) {\n    repository(owner: $owner, name: $name) {\n      ...RepositoryParts\n      commit: object(oid: $sha) {\n        ...ObjectParts\n        ... on Commit {\n          tree {\n            ...ObjectParts\n            entries {\n              ...TreeEntryParts\n            }\n          }\n        }\n      }\n    }\n  }\n  ", "\n  ", "\n  ", "\n"]);

  _templateObject12 = function _templateObject12() {
    return data;
  };

  return data;
}

function _templateObject11() {
  const data = _taggedTemplateLiteral(["\n  query pullRequestAndBranch($owner: String!, $name: String!, $origin_owner: String!, $origin_name: String!, $qualifiedName: String!, $number: Int!) {\n    repository(owner: $owner, name: $name) {\n      ...RepositoryParts\n      ", "\n    }\n    origin: repository(owner: $origin_owner, name: $origin_name) {\n      ...RepositoryParts\n      ", "\n    }\n  }\n  ", "\n  ", "\n  ", "\n"]);

  _templateObject11 = function _templateObject11() {
    return data;
  };

  return data;
}

function _templateObject10() {
  const data = _taggedTemplateLiteral(["\n  query pullRequest($owner: String!, $name: String!, $number: Int!) {\n    repository(owner: $owner, name: $name) {\n      id\n      ", "\n    }\n  }\n  ", "\n"]);

  _templateObject10 = function _templateObject10() {
    return data;
  };

  return data;
}

function _templateObject9() {
  const data = _taggedTemplateLiteral(["\n  query repository($owner: String!, $name: String!) {\n    repository(owner: $owner, name: $name) {\n      ...RepositoryParts\n    }\n  }\n  ", "\n"]);

  _templateObject9 = function _templateObject9() {
    return data;
  };

  return data;
}

function _templateObject8() {
  const data = _taggedTemplateLiteral(["\n  query branch($owner: String!, $name: String!, $qualifiedName: String!) {\n    repository(owner: $owner, name: $name) {\n      ...RepositoryParts\n      ", "\n    }\n  }\n  ", "\n  ", "\n"]);

  _templateObject8 = function _templateObject8() {
    return data;
  };

  return data;
}

function _templateObject7() {
  const data = _taggedTemplateLiteral(["\n  query unpublishedPrBranches($owner: String!, $name: String!) {\n    repository(owner: $owner, name: $name) {\n      ...RepositoryParts\n      refs(refPrefix: \"refs/heads/cms/\", last: 50) {\n        nodes {\n          id\n          associatedPullRequests(last: 50, states: OPEN) {\n            nodes {\n              id\n              headRef {\n                id\n                name\n                prefix\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n  ", "\n"]);

  _templateObject7 = function _templateObject7() {
    return data;
  };

  return data;
}

function _templateObject6() {
  const data = _taggedTemplateLiteral(["\n  query files($owner: String!, $name: String!, $expression: String!) {\n    repository(owner: $owner, name: $name) {\n      ...RepositoryParts\n      object(expression: $expression) {\n        ...ObjectParts\n        ... on Tree {\n          entries {\n            ...FileEntryParts\n          }\n        }\n      }\n    }\n  }\n  ", "\n  ", "\n  ", "\n"]);

  _templateObject6 = function _templateObject6() {
    return data;
  };

  return data;
}

function _templateObject5() {
  const data = _taggedTemplateLiteral(["\n  query statues($owner: String!, $name: String!, $sha: GitObjectID!) {\n    repository(owner: $owner, name: $name) {\n      ...RepositoryParts\n      object(oid: $sha) {\n        ...ObjectParts\n        ... on Commit {\n          status {\n            id\n            contexts {\n              id\n              context\n              state\n              target_url: targetUrl\n            }\n          }\n        }\n      }\n    }\n  }\n  ", "\n  ", "\n"]);

  _templateObject5 = function _templateObject5() {
    return data;
  };

  return data;
}

function _templateObject4() {
  const data = _taggedTemplateLiteral(["\n  query unpublishedBranchFile(\n    $headOwner: String!\n    $headRepoName: String!\n    $headExpression: String!\n    $baseOwner: String!\n    $baseRepoName: String!\n    $baseExpression: String!\n  ) {\n    head: repository(owner: $headOwner, name: $headRepoName) {\n      ...RepositoryParts\n      object(expression: $headExpression) {\n        ... on Blob {\n          ...BlobWithTextParts\n        }\n      }\n    }\n    base: repository(owner: $baseOwner, name: $baseRepoName) {\n      ...RepositoryParts\n      object(expression: $baseExpression) {\n        ... on Blob {\n          id\n          oid\n        }\n      }\n    }\n  }\n  ", "\n  ", "\n"]);

  _templateObject4 = function _templateObject4() {
    return data;
  };

  return data;
}

function _templateObject3() {
  const data = _taggedTemplateLiteral(["\n  query blob($owner: String!, $name: String!, $expression: String!) {\n    repository(owner: $owner, name: $name) {\n      ...RepositoryParts\n      object(expression: $expression) {\n        ... on Blob {\n          ...BlobWithTextParts\n        }\n      }\n    }\n  }\n  ", "\n  ", "\n"]);

  _templateObject3 = function _templateObject3() {
    return data;
  };

  return data;
}

function _templateObject2() {
  const data = _taggedTemplateLiteral(["\n  query {\n    viewer {\n      id\n      avatar_url: avatarUrl\n      name\n      login\n    }\n  }\n"]);

  _templateObject2 = function _templateObject2() {
    return data;
  };

  return data;
}

function _templateObject() {
  const data = _taggedTemplateLiteral(["\n  query repoPermission($owner: String!, $name: String!) {\n    repository(owner: $owner, name: $name) {\n      ...RepositoryParts\n      viewerPermission\n    }\n  }\n  ", "\n"]);

  _templateObject = function _templateObject() {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

const repoPermission = (0, _graphqlTag.default)(_templateObject(), fragments.repository);
exports.repoPermission = repoPermission;
const user = (0, _graphqlTag.default)(_templateObject2());
exports.user = user;
const blob = (0, _graphqlTag.default)(_templateObject3(), fragments.repository, fragments.blobWithText);
exports.blob = blob;
const unpublishedBranchFile = (0, _graphqlTag.default)(_templateObject4(), fragments.repository, fragments.blobWithText);
exports.unpublishedBranchFile = unpublishedBranchFile;
const statues = (0, _graphqlTag.default)(_templateObject5(), fragments.repository, fragments.object);
exports.statues = statues;
const files = (0, _graphqlTag.default)(_templateObject6(), fragments.repository, fragments.object, fragments.fileEntry);
exports.files = files;
const unpublishedPrBranches = (0, _graphqlTag.default)(_templateObject7(), fragments.repository);
exports.unpublishedPrBranches = unpublishedPrBranches;
const branchQueryPart = "\nbranch: ref(qualifiedName: $qualifiedName) {\n  ...BranchParts\n}\n";
const branch = (0, _graphqlTag.default)(_templateObject8(), branchQueryPart, fragments.repository, fragments.branch);
exports.branch = branch;
const repository = (0, _graphqlTag.default)(_templateObject9(), fragments.repository);
exports.repository = repository;
const pullRequestQueryPart = "\npullRequest(number: $number) {\n  ...PullRequestParts\n}\n";
const pullRequest = (0, _graphqlTag.default)(_templateObject10(), pullRequestQueryPart, fragments.pullRequest);
exports.pullRequest = pullRequest;
const pullRequestAndBranch = (0, _graphqlTag.default)(_templateObject11(), branchQueryPart, pullRequestQueryPart, fragments.repository, fragments.branch, fragments.pullRequest);
exports.pullRequestAndBranch = pullRequestAndBranch;
const commitTree = (0, _graphqlTag.default)(_templateObject12(), fragments.repository, fragments.object, fragments.treeEntry);
exports.commitTree = commitTree;
const tree = (0, _graphqlTag.default)(_templateObject13(), fragments.repository, fragments.object, fragments.treeEntry);
exports.tree = tree;
const pullRequestCommits = (0, _graphqlTag.default)(_templateObject14(), fragments.repository, fragments.object);
exports.pullRequestCommits = pullRequestCommits;
const fileSha = (0, _graphqlTag.default)(_templateObject15(), fragments.repository, fragments.object);
exports.fileSha = fileSha;