"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.commitMessageFormatter = void 0;

var _immutable = require("immutable");

const commitMessageTemplates = (0, _immutable.Map)({
  create: 'Create {{collection}} “{{slug}}”',
  update: 'Update {{collection}} “{{slug}}”',
  delete: 'Delete {{collection}} “{{slug}}”',
  uploadMedia: 'Upload “{{path}}”',
  deleteMedia: 'Delete “{{path}}”',
  openAuthoring: '{{message}}'
});
const variableRegex = /\{\{([^}]+)\}\}/g;

const commitMessageFormatter = (type, config, _ref, isOpenAuthoring) => {
  let {
    slug,
    path,
    collection,
    authorLogin,
    authorName
  } = _ref;
  const templates = commitMessageTemplates.merge(config.getIn(['backend', 'commit_messages'], (0, _immutable.Map)()));
  const commitMessage = templates.get(type).replace(variableRegex, (_, variable) => {
    switch (variable) {
      case 'slug':
        return slug;

      case 'path':
        return path;

      case 'collection':
        return collection.get('label_singular') || collection.get('label');

      default:
        console.warn("Ignoring unknown variable \u201C".concat(variable, "\u201D in commit message template."));
        return '';
    }
  });

  if (!isOpenAuthoring) {
    return commitMessage;
  }

  const message = templates.get('openAuthoring').replace(variableRegex, (_, variable) => {
    switch (variable) {
      case 'message':
        return commitMessage;

      case 'author-login':
        return authorLogin || '';

      case 'author-name':
        return authorName || '';

      default:
        console.warn("Ignoring unknown variable \u201C".concat(variable, "\u201D in open authoring message template."));
        return '';
    }
  });
  return message;
};

exports.commitMessageFormatter = commitMessageFormatter;