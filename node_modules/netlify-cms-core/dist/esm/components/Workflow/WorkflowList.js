"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _css2 = _interopRequireDefault(require("@emotion/css"));

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireDefault(require("react"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _core = require("@emotion/core");

var _moment = _interopRequireDefault(require("moment"));

var _reactPolyglot = require("react-polyglot");

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _publishModes = require("../../constants/publishModes");

var _UI = require("../UI");

var _WorkflowCard = _interopRequireDefault(require("./WorkflowCard"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const WorkflowListContainer = (0, _styledBase.default)("div", {
  target: "e1sboua10",
  label: "WorkflowListContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "1booyhj",
  styles: "min-height:60%;display:grid;grid-template-columns:33.3% 33.3% 33.3%;"
} : {
  name: "1booyhj",
  styles: "min-height:60%;display:grid;grid-template-columns:33.3% 33.3% 33.3%;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1dvcmtmbG93L1dvcmtmbG93TGlzdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFhd0MiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvV29ya2Zsb3cvV29ya2Zsb3dMaXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBqc3gganN4ICovXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgeyBqc3gsIGNzcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHsgdHJhbnNsYXRlIH0gZnJvbSAncmVhY3QtcG9seWdsb3QnO1xuaW1wb3J0IHsgY29sb3JzLCBsZW5ndGhzIH0gZnJvbSAnbmV0bGlmeS1jbXMtdWktZGVmYXVsdCc7XG5pbXBvcnQgeyBzdGF0dXMgfSBmcm9tICdDb25zdGFudHMvcHVibGlzaE1vZGVzJztcbmltcG9ydCB7IERyYWdTb3VyY2UsIERyb3BUYXJnZXQsIEhUTUw1RHJhZ0Ryb3AgfSBmcm9tICdVSSc7XG5pbXBvcnQgV29ya2Zsb3dDYXJkIGZyb20gJy4vV29ya2Zsb3dDYXJkJztcblxuY29uc3QgV29ya2Zsb3dMaXN0Q29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgbWluLWhlaWdodDogNjAlO1xuICBkaXNwbGF5OiBncmlkO1xuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDMzLjMlIDMzLjMlIDMzLjMlO1xuYDtcblxuY29uc3QgV29ya2Zsb3dMaXN0Q29udGFpbmVyT3BlbkF1dGhvcmluZyA9IHN0eWxlZC5kaXZgXG4gIG1pbi1oZWlnaHQ6IDYwJTtcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiA1MCUgNTAlIDAlO1xuYDtcblxuY29uc3Qgc3R5bGVzID0ge1xuICBjb2x1bW5Qb3NpdGlvbjogaWR4ID0+XG4gICAgKGlkeCA9PT0gMCAmJlxuICAgICAgY3NzYFxuICAgICAgICBtYXJnaW4tbGVmdDogMDtcbiAgICAgIGApIHx8XG4gICAgKGlkeCA9PT0gMiAmJlxuICAgICAgY3NzYFxuICAgICAgICBtYXJnaW4tcmlnaHQ6IDA7XG4gICAgICBgKSB8fFxuICAgIGNzc2BcbiAgICAgICY6YmVmb3JlLFxuICAgICAgJjphZnRlciB7XG4gICAgICAgIGNvbnRlbnQ6ICcnO1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB3aWR0aDogMnB4O1xuICAgICAgICBoZWlnaHQ6IDgwJTtcbiAgICAgICAgdG9wOiA3NnB4O1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy50ZXh0RmllbGRCb3JkZXJ9O1xuICAgICAgfVxuXG4gICAgICAmOmJlZm9yZSB7XG4gICAgICAgIGxlZnQ6IC0yM3B4O1xuICAgICAgfVxuXG4gICAgICAmOmFmdGVyIHtcbiAgICAgICAgcmlnaHQ6IC0yM3B4O1xuICAgICAgfVxuICAgIGAsXG4gIGNvbHVtbjogY3NzYFxuICAgIG1hcmdpbjogMCAyMHB4O1xuICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMC41cyBlYXNlO1xuICAgIGJvcmRlcjogMnB4IGRhc2hlZCB0cmFuc3BhcmVudDtcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgYCxcbiAgY29sdW1uSG92ZXJlZDogY3NzYFxuICAgIGJvcmRlci1jb2xvcjogJHtjb2xvcnMuYWN0aXZlfTtcbiAgYCxcbiAgaGlkZGVuQ29sdW1uOiBjc3NgXG4gICAgZGlzcGxheTogbm9uZTtcbiAgYCxcbiAgaGlkZGVuUmlnaHRCb3JkZXI6IGNzc2BcbiAgICAmOm5vdCg6Zmlyc3QtY2hpbGQpOm5vdCg6bGFzdC1jaGlsZCkge1xuICAgICAgJjphZnRlciB7XG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICB9XG4gICAgfVxuICBgLFxufTtcblxuY29uc3QgQ29sdW1uSGVhZGVyID0gc3R5bGVkLmgyYFxuICBmb250LXNpemU6IDIwcHg7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIHBhZGRpbmc6IDRweCAxNHB4O1xuICBib3JkZXItcmFkaXVzOiAke2xlbmd0aHMuYm9yZGVyUmFkaXVzfTtcbiAgbWFyZ2luLWJvdHRvbTogMjhweDtcblxuICAke3Byb3BzID0+XG4gICAgcHJvcHMubmFtZSA9PT0gJ2RyYWZ0JyAmJlxuICAgIGNzc2BcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLnN0YXR1c0RyYWZ0QmFja2dyb3VuZH07XG4gICAgICBjb2xvcjogJHtjb2xvcnMuc3RhdHVzRHJhZnRUZXh0fTtcbiAgICBgfVxuXG4gICR7cHJvcHMgPT5cbiAgICBwcm9wcy5uYW1lID09PSAncGVuZGluZ19yZXZpZXcnICYmXG4gICAgY3NzYFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuc3RhdHVzUmV2aWV3QmFja2dyb3VuZH07XG4gICAgICBjb2xvcjogJHtjb2xvcnMuc3RhdHVzUmV2aWV3VGV4dH07XG4gICAgYH1cblxuICAke3Byb3BzID0+XG4gICAgcHJvcHMubmFtZSA9PT0gJ3BlbmRpbmdfcHVibGlzaCcgJiZcbiAgICBjc3NgXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5zdGF0dXNSZWFkeUJhY2tncm91bmR9O1xuICAgICAgY29sb3I6ICR7Y29sb3JzLnN0YXR1c1JlYWR5VGV4dH07XG4gICAgYH1cbmA7XG5cbmNvbnN0IENvbHVtbkNvdW50ID0gc3R5bGVkLnBgXG4gIGZvbnQtc2l6ZTogMTNweDtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgY29sb3I6ICR7Y29sb3JzLnRleHR9O1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBtYXJnaW4tYm90dG9tOiA2cHg7XG5gO1xuXG4vLyBUaGlzIGlzIGEgbmFtZXNwYWNlIHNvIHRoYXQgd2UgY2FuIG9ubHkgZHJvcCB0aGVzZSBlbGVtZW50cyBvbiBhIERyb3BUYXJnZXQgd2l0aCB0aGUgc2FtZVxuY29uc3QgRE5ETmFtZXNwYWNlID0gJ2Ntcy13b3JrZmxvdyc7XG5cbmNvbnN0IGdldENvbHVtbkhlYWRlclRleHQgPSAoY29sdW1uTmFtZSwgdCkgPT4ge1xuICBzd2l0Y2ggKGNvbHVtbk5hbWUpIHtcbiAgICBjYXNlICdkcmFmdCc6XG4gICAgICByZXR1cm4gdCgnd29ya2Zsb3cud29ya2Zsb3dMaXN0LmRyYWZ0SGVhZGVyJyk7XG4gICAgY2FzZSAncGVuZGluZ19yZXZpZXcnOlxuICAgICAgcmV0dXJuIHQoJ3dvcmtmbG93LndvcmtmbG93TGlzdC5pblJldmlld0hlYWRlcicpO1xuICAgIGNhc2UgJ3BlbmRpbmdfcHVibGlzaCc6XG4gICAgICByZXR1cm4gdCgnd29ya2Zsb3cud29ya2Zsb3dMaXN0LnJlYWR5SGVhZGVyJyk7XG4gIH1cbn07XG5cbmNsYXNzIFdvcmtmbG93TGlzdCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgZW50cmllczogSW1tdXRhYmxlUHJvcFR5cGVzLm9yZGVyZWRNYXAsXG4gICAgaGFuZGxlQ2hhbmdlU3RhdHVzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGhhbmRsZVB1Ymxpc2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgaGFuZGxlRGVsZXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgaXNPcGVuQXV0aG9yaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgfTtcblxuICBoYW5kbGVDaGFuZ2VTdGF0dXMgPSAobmV3U3RhdHVzLCBkcmFnUHJvcHMpID0+IHtcbiAgICBjb25zdCBzbHVnID0gZHJhZ1Byb3BzLnNsdWc7XG4gICAgY29uc3QgY29sbGVjdGlvbiA9IGRyYWdQcm9wcy5jb2xsZWN0aW9uO1xuICAgIGNvbnN0IG9sZFN0YXR1cyA9IGRyYWdQcm9wcy5vd25TdGF0dXM7XG4gICAgdGhpcy5wcm9wcy5oYW5kbGVDaGFuZ2VTdGF0dXMoY29sbGVjdGlvbiwgc2x1Zywgb2xkU3RhdHVzLCBuZXdTdGF0dXMpO1xuICB9O1xuXG4gIHJlcXVlc3REZWxldGUgPSAoY29sbGVjdGlvbiwgc2x1Zywgb3duU3RhdHVzKSA9PiB7XG4gICAgaWYgKHdpbmRvdy5jb25maXJtKHRoaXMucHJvcHMudCgnd29ya2Zsb3cud29ya2Zsb3dMaXN0Lm9uRGVsZXRlRW50cnknKSkpIHtcbiAgICAgIHRoaXMucHJvcHMuaGFuZGxlRGVsZXRlKGNvbGxlY3Rpb24sIHNsdWcsIG93blN0YXR1cyk7XG4gICAgfVxuICB9O1xuXG4gIHJlcXVlc3RQdWJsaXNoID0gKGNvbGxlY3Rpb24sIHNsdWcsIG93blN0YXR1cykgPT4ge1xuICAgIGlmIChvd25TdGF0dXMgIT09IHN0YXR1cy5sYXN0KCkpIHtcbiAgICAgIHdpbmRvdy5hbGVydCh0aGlzLnByb3BzLnQoJ3dvcmtmbG93LndvcmtmbG93TGlzdC5vblB1Ymxpc2hpbmdOb3RSZWFkeUVudHJ5JykpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAoIXdpbmRvdy5jb25maXJtKHRoaXMucHJvcHMudCgnd29ya2Zsb3cud29ya2Zsb3dMaXN0Lm9uUHVibGlzaEVudHJ5JykpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMucHJvcHMuaGFuZGxlUHVibGlzaChjb2xsZWN0aW9uLCBzbHVnKTtcbiAgfTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvZGlzcGxheS1uYW1lXG4gIHJlbmRlckNvbHVtbnMgPSAoZW50cmllcywgY29sdW1uKSA9PiB7XG4gICAgY29uc3QgeyBpc09wZW5BdXRob3JpbmcgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCFlbnRyaWVzKSByZXR1cm4gbnVsbDtcblxuICAgIGlmICghY29sdW1uKSB7XG4gICAgICByZXR1cm4gZW50cmllcy5lbnRyeVNlcSgpLm1hcCgoW2N1cnJDb2x1bW4sIGN1cnJFbnRyaWVzXSwgaWR4KSA9PiAoXG4gICAgICAgIDxEcm9wVGFyZ2V0XG4gICAgICAgICAgbmFtZXNwYWNlPXtETkROYW1lc3BhY2V9XG4gICAgICAgICAga2V5PXtjdXJyQ29sdW1ufVxuICAgICAgICAgIG9uRHJvcD17dGhpcy5oYW5kbGVDaGFuZ2VTdGF0dXMuYmluZCh0aGlzLCBjdXJyQ29sdW1uKX1cbiAgICAgICAgPlxuICAgICAgICAgIHsoY29ubmVjdCwgeyBpc0hvdmVyZWQgfSkgPT5cbiAgICAgICAgICAgIGNvbm5lY3QoXG4gICAgICAgICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiAnMTAwJScgfX0+XG4gICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgY3NzPXtbXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlcy5jb2x1bW4sXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlcy5jb2x1bW5Qb3NpdGlvbihpZHgpLFxuICAgICAgICAgICAgICAgICAgICBpc0hvdmVyZWQgJiYgc3R5bGVzLmNvbHVtbkhvdmVyZWQsXG4gICAgICAgICAgICAgICAgICAgIGlzT3BlbkF1dGhvcmluZyAmJiBjdXJyQ29sdW1uID09PSAncGVuZGluZ19wdWJsaXNoJyAmJiBzdHlsZXMuaGlkZGVuQ29sdW1uLFxuICAgICAgICAgICAgICAgICAgICBpc09wZW5BdXRob3JpbmcgJiYgY3VyckNvbHVtbiA9PT0gJ3BlbmRpbmdfcmV2aWV3JyAmJiBzdHlsZXMuaGlkZGVuUmlnaHRCb3JkZXIsXG4gICAgICAgICAgICAgICAgICBdfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxDb2x1bW5IZWFkZXIgbmFtZT17Y3VyckNvbHVtbn0+XG4gICAgICAgICAgICAgICAgICAgIHtnZXRDb2x1bW5IZWFkZXJUZXh0KGN1cnJDb2x1bW4sIHRoaXMucHJvcHMudCl9XG4gICAgICAgICAgICAgICAgICA8L0NvbHVtbkhlYWRlcj5cbiAgICAgICAgICAgICAgICAgIDxDb2x1bW5Db3VudD5cbiAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMudCgnd29ya2Zsb3cud29ya2Zsb3dMaXN0LmN1cnJlbnRFbnRyaWVzJywge1xuICAgICAgICAgICAgICAgICAgICAgIHNtYXJ0X2NvdW50OiBjdXJyRW50cmllcy5zaXplLFxuICAgICAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgICAgIDwvQ29sdW1uQ291bnQ+XG4gICAgICAgICAgICAgICAgICB7dGhpcy5yZW5kZXJDb2x1bW5zKGN1cnJFbnRyaWVzLCBjdXJyQ29sdW1uKX1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+LFxuICAgICAgICAgICAgKVxuICAgICAgICAgIH1cbiAgICAgICAgPC9Ecm9wVGFyZ2V0PlxuICAgICAgKSk7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICB7ZW50cmllcy5tYXAoZW50cnkgPT4ge1xuICAgICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IG1vbWVudChlbnRyeS5nZXRJbihbJ21ldGFEYXRhJywgJ3RpbWVTdGFtcCddKSkuZm9ybWF0KCdNTU1NIEQnKTtcbiAgICAgICAgICBjb25zdCBlZGl0TGluayA9IGBjb2xsZWN0aW9ucy8ke2VudHJ5LmdldEluKFtcbiAgICAgICAgICAgICdtZXRhRGF0YScsXG4gICAgICAgICAgICAnY29sbGVjdGlvbicsXG4gICAgICAgICAgXSl9L2VudHJpZXMvJHtlbnRyeS5nZXQoJ3NsdWcnKX1gO1xuICAgICAgICAgIGNvbnN0IHNsdWcgPSBlbnRyeS5nZXQoJ3NsdWcnKTtcbiAgICAgICAgICBjb25zdCBvd25TdGF0dXMgPSBlbnRyeS5nZXRJbihbJ21ldGFEYXRhJywgJ3N0YXR1cyddKTtcbiAgICAgICAgICBjb25zdCBjb2xsZWN0aW9uID0gZW50cnkuZ2V0SW4oWydtZXRhRGF0YScsICdjb2xsZWN0aW9uJ10pO1xuICAgICAgICAgIGNvbnN0IGlzTW9kaWZpY2F0aW9uID0gZW50cnkuZ2V0KCdpc01vZGlmaWNhdGlvbicpO1xuICAgICAgICAgIGNvbnN0IGNhblB1Ymxpc2ggPSBvd25TdGF0dXMgPT09IHN0YXR1cy5sYXN0KCkgJiYgIWVudHJ5LmdldCgnaXNQZXJzaXN0aW5nJywgZmFsc2UpO1xuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8RHJhZ1NvdXJjZVxuICAgICAgICAgICAgICBuYW1lc3BhY2U9e0RORE5hbWVzcGFjZX1cbiAgICAgICAgICAgICAga2V5PXtgJHtjb2xsZWN0aW9ufS0ke3NsdWd9YH1cbiAgICAgICAgICAgICAgc2x1Zz17c2x1Z31cbiAgICAgICAgICAgICAgY29sbGVjdGlvbj17Y29sbGVjdGlvbn1cbiAgICAgICAgICAgICAgb3duU3RhdHVzPXtvd25TdGF0dXN9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtjb25uZWN0ID0+XG4gICAgICAgICAgICAgICAgY29ubmVjdChcbiAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgIDxXb3JrZmxvd0NhcmRcbiAgICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uTmFtZT17Y29sbGVjdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgICB0aXRsZT17ZW50cnkuZ2V0SW4oWydkYXRhJywgJ3RpdGxlJ10pfVxuICAgICAgICAgICAgICAgICAgICAgIGF1dGhvckxhc3RDaGFuZ2U9e2VudHJ5LmdldEluKFsnbWV0YURhdGEnLCAndXNlciddKX1cbiAgICAgICAgICAgICAgICAgICAgICBib2R5PXtlbnRyeS5nZXRJbihbJ2RhdGEnLCAnYm9keSddKX1cbiAgICAgICAgICAgICAgICAgICAgICBpc01vZGlmaWNhdGlvbj17aXNNb2RpZmljYXRpb259XG4gICAgICAgICAgICAgICAgICAgICAgZWRpdExpbms9e2VkaXRMaW5rfVxuICAgICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcD17dGltZXN0YW1wfVxuICAgICAgICAgICAgICAgICAgICAgIG9uRGVsZXRlPXt0aGlzLnJlcXVlc3REZWxldGUuYmluZCh0aGlzLCBjb2xsZWN0aW9uLCBzbHVnLCBvd25TdGF0dXMpfVxuICAgICAgICAgICAgICAgICAgICAgIGNhblB1Ymxpc2g9e2NhblB1Ymxpc2h9XG4gICAgICAgICAgICAgICAgICAgICAgb25QdWJsaXNoPXt0aGlzLnJlcXVlc3RQdWJsaXNoLmJpbmQodGhpcywgY29sbGVjdGlvbiwgc2x1Zywgb3duU3RhdHVzKX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PixcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDwvRHJhZ1NvdXJjZT5cbiAgICAgICAgICApO1xuICAgICAgICB9KX1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IGNvbHVtbnMgPSB0aGlzLnJlbmRlckNvbHVtbnModGhpcy5wcm9wcy5lbnRyaWVzKTtcbiAgICBjb25zdCBMaXN0Q29udGFpbmVyID0gdGhpcy5wcm9wcy5pc09wZW5BdXRob3JpbmdcbiAgICAgID8gV29ya2Zsb3dMaXN0Q29udGFpbmVyT3BlbkF1dGhvcmluZ1xuICAgICAgOiBXb3JrZmxvd0xpc3RDb250YWluZXI7XG4gICAgcmV0dXJuIDxMaXN0Q29udGFpbmVyPntjb2x1bW5zfTwvTGlzdENvbnRhaW5lcj47XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSFRNTDVEcmFnRHJvcCh0cmFuc2xhdGUoKShXb3JrZmxvd0xpc3QpKTtcbiJdfQ== */"
});
const WorkflowListContainerOpenAuthoring = (0, _styledBase.default)("div", {
  target: "e1sboua11",
  label: "WorkflowListContainerOpenAuthoring"
})(process.env.NODE_ENV === "production" ? {
  name: "1q1dzdp",
  styles: "min-height:60%;display:grid;grid-template-columns:50% 50% 0%;"
} : {
  name: "1q1dzdp",
  styles: "min-height:60%;display:grid;grid-template-columns:50% 50% 0%;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
});

var _ref = process.env.NODE_ENV === "production" ? {
  name: "qbubgm",
  styles: "margin-left:0;"
} : {
  name: "qbubgm",
  styles: "margin-left:0;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL1dvcmtmbG93L1dvcmtmbG93TGlzdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUE0QlMiLCJmaWxlIjoiLi4vLi4vLi4vLi4vc3JjL2NvbXBvbmVudHMvV29ya2Zsb3cvV29ya2Zsb3dMaXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBqc3gganN4ICovXG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gJ3Byb3AtdHlwZXMnO1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBJbW11dGFibGVQcm9wVHlwZXMgZnJvbSAncmVhY3QtaW1tdXRhYmxlLXByb3B0eXBlcyc7XG5pbXBvcnQgeyBqc3gsIGNzcyB9IGZyb20gJ0BlbW90aW9uL2NvcmUnO1xuaW1wb3J0IHN0eWxlZCBmcm9tICdAZW1vdGlvbi9zdHlsZWQnO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0IHsgdHJhbnNsYXRlIH0gZnJvbSAncmVhY3QtcG9seWdsb3QnO1xuaW1wb3J0IHsgY29sb3JzLCBsZW5ndGhzIH0gZnJvbSAnbmV0bGlmeS1jbXMtdWktZGVmYXVsdCc7XG5pbXBvcnQgeyBzdGF0dXMgfSBmcm9tICdDb25zdGFudHMvcHVibGlzaE1vZGVzJztcbmltcG9ydCB7IERyYWdTb3VyY2UsIERyb3BUYXJnZXQsIEhUTUw1RHJhZ0Ryb3AgfSBmcm9tICdVSSc7XG5pbXBvcnQgV29ya2Zsb3dDYXJkIGZyb20gJy4vV29ya2Zsb3dDYXJkJztcblxuY29uc3QgV29ya2Zsb3dMaXN0Q29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgbWluLWhlaWdodDogNjAlO1xuICBkaXNwbGF5OiBncmlkO1xuICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDMzLjMlIDMzLjMlIDMzLjMlO1xuYDtcblxuY29uc3QgV29ya2Zsb3dMaXN0Q29udGFpbmVyT3BlbkF1dGhvcmluZyA9IHN0eWxlZC5kaXZgXG4gIG1pbi1oZWlnaHQ6IDYwJTtcbiAgZGlzcGxheTogZ3JpZDtcbiAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiA1MCUgNTAlIDAlO1xuYDtcblxuY29uc3Qgc3R5bGVzID0ge1xuICBjb2x1bW5Qb3NpdGlvbjogaWR4ID0+XG4gICAgKGlkeCA9PT0gMCAmJlxuICAgICAgY3NzYFxuICAgICAgICBtYXJnaW4tbGVmdDogMDtcbiAgICAgIGApIHx8XG4gICAgKGlkeCA9PT0gMiAmJlxuICAgICAgY3NzYFxuICAgICAgICBtYXJnaW4tcmlnaHQ6IDA7XG4gICAgICBgKSB8fFxuICAgIGNzc2BcbiAgICAgICY6YmVmb3JlLFxuICAgICAgJjphZnRlciB7XG4gICAgICAgIGNvbnRlbnQ6ICcnO1xuICAgICAgICBkaXNwbGF5OiBibG9jaztcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICB3aWR0aDogMnB4O1xuICAgICAgICBoZWlnaHQ6IDgwJTtcbiAgICAgICAgdG9wOiA3NnB4O1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy50ZXh0RmllbGRCb3JkZXJ9O1xuICAgICAgfVxuXG4gICAgICAmOmJlZm9yZSB7XG4gICAgICAgIGxlZnQ6IC0yM3B4O1xuICAgICAgfVxuXG4gICAgICAmOmFmdGVyIHtcbiAgICAgICAgcmlnaHQ6IC0yM3B4O1xuICAgICAgfVxuICAgIGAsXG4gIGNvbHVtbjogY3NzYFxuICAgIG1hcmdpbjogMCAyMHB4O1xuICAgIHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMC41cyBlYXNlO1xuICAgIGJvcmRlcjogMnB4IGRhc2hlZCB0cmFuc3BhcmVudDtcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgYCxcbiAgY29sdW1uSG92ZXJlZDogY3NzYFxuICAgIGJvcmRlci1jb2xvcjogJHtjb2xvcnMuYWN0aXZlfTtcbiAgYCxcbiAgaGlkZGVuQ29sdW1uOiBjc3NgXG4gICAgZGlzcGxheTogbm9uZTtcbiAgYCxcbiAgaGlkZGVuUmlnaHRCb3JkZXI6IGNzc2BcbiAgICAmOm5vdCg6Zmlyc3QtY2hpbGQpOm5vdCg6bGFzdC1jaGlsZCkge1xuICAgICAgJjphZnRlciB7XG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgICB9XG4gICAgfVxuICBgLFxufTtcblxuY29uc3QgQ29sdW1uSGVhZGVyID0gc3R5bGVkLmgyYFxuICBmb250LXNpemU6IDIwcHg7XG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XG4gIHBhZGRpbmc6IDRweCAxNHB4O1xuICBib3JkZXItcmFkaXVzOiAke2xlbmd0aHMuYm9yZGVyUmFkaXVzfTtcbiAgbWFyZ2luLWJvdHRvbTogMjhweDtcblxuICAke3Byb3BzID0+XG4gICAgcHJvcHMubmFtZSA9PT0gJ2RyYWZ0JyAmJlxuICAgIGNzc2BcbiAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLnN0YXR1c0RyYWZ0QmFja2dyb3VuZH07XG4gICAgICBjb2xvcjogJHtjb2xvcnMuc3RhdHVzRHJhZnRUZXh0fTtcbiAgICBgfVxuXG4gICR7cHJvcHMgPT5cbiAgICBwcm9wcy5uYW1lID09PSAncGVuZGluZ19yZXZpZXcnICYmXG4gICAgY3NzYFxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnMuc3RhdHVzUmV2aWV3QmFja2dyb3VuZH07XG4gICAgICBjb2xvcjogJHtjb2xvcnMuc3RhdHVzUmV2aWV3VGV4dH07XG4gICAgYH1cblxuICAke3Byb3BzID0+XG4gICAgcHJvcHMubmFtZSA9PT0gJ3BlbmRpbmdfcHVibGlzaCcgJiZcbiAgICBjc3NgXG4gICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5zdGF0dXNSZWFkeUJhY2tncm91bmR9O1xuICAgICAgY29sb3I6ICR7Y29sb3JzLnN0YXR1c1JlYWR5VGV4dH07XG4gICAgYH1cbmA7XG5cbmNvbnN0IENvbHVtbkNvdW50ID0gc3R5bGVkLnBgXG4gIGZvbnQtc2l6ZTogMTNweDtcbiAgZm9udC13ZWlnaHQ6IDUwMDtcbiAgY29sb3I6ICR7Y29sb3JzLnRleHR9O1xuICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuICBtYXJnaW4tYm90dG9tOiA2cHg7XG5gO1xuXG4vLyBUaGlzIGlzIGEgbmFtZXNwYWNlIHNvIHRoYXQgd2UgY2FuIG9ubHkgZHJvcCB0aGVzZSBlbGVtZW50cyBvbiBhIERyb3BUYXJnZXQgd2l0aCB0aGUgc2FtZVxuY29uc3QgRE5ETmFtZXNwYWNlID0gJ2Ntcy13b3JrZmxvdyc7XG5cbmNvbnN0IGdldENvbHVtbkhlYWRlclRleHQgPSAoY29sdW1uTmFtZSwgdCkgPT4ge1xuICBzd2l0Y2ggKGNvbHVtbk5hbWUpIHtcbiAgICBjYXNlICdkcmFmdCc6XG4gICAgICByZXR1cm4gdCgnd29ya2Zsb3cud29ya2Zsb3dMaXN0LmRyYWZ0SGVhZGVyJyk7XG4gICAgY2FzZSAncGVuZGluZ19yZXZpZXcnOlxuICAgICAgcmV0dXJuIHQoJ3dvcmtmbG93LndvcmtmbG93TGlzdC5pblJldmlld0hlYWRlcicpO1xuICAgIGNhc2UgJ3BlbmRpbmdfcHVibGlzaCc6XG4gICAgICByZXR1cm4gdCgnd29ya2Zsb3cud29ya2Zsb3dMaXN0LnJlYWR5SGVhZGVyJyk7XG4gIH1cbn07XG5cbmNsYXNzIFdvcmtmbG93TGlzdCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgZW50cmllczogSW1tdXRhYmxlUHJvcFR5cGVzLm9yZGVyZWRNYXAsXG4gICAgaGFuZGxlQ2hhbmdlU3RhdHVzOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIGhhbmRsZVB1Ymxpc2g6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgaGFuZGxlRGVsZXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgIHQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgaXNPcGVuQXV0aG9yaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgfTtcblxuICBoYW5kbGVDaGFuZ2VTdGF0dXMgPSAobmV3U3RhdHVzLCBkcmFnUHJvcHMpID0+IHtcbiAgICBjb25zdCBzbHVnID0gZHJhZ1Byb3BzLnNsdWc7XG4gICAgY29uc3QgY29sbGVjdGlvbiA9IGRyYWdQcm9wcy5jb2xsZWN0aW9uO1xuICAgIGNvbnN0IG9sZFN0YXR1cyA9IGRyYWdQcm9wcy5vd25TdGF0dXM7XG4gICAgdGhpcy5wcm9wcy5oYW5kbGVDaGFuZ2VTdGF0dXMoY29sbGVjdGlvbiwgc2x1Zywgb2xkU3RhdHVzLCBuZXdTdGF0dXMpO1xuICB9O1xuXG4gIHJlcXVlc3REZWxldGUgPSAoY29sbGVjdGlvbiwgc2x1Zywgb3duU3RhdHVzKSA9PiB7XG4gICAgaWYgKHdpbmRvdy5jb25maXJtKHRoaXMucHJvcHMudCgnd29ya2Zsb3cud29ya2Zsb3dMaXN0Lm9uRGVsZXRlRW50cnknKSkpIHtcbiAgICAgIHRoaXMucHJvcHMuaGFuZGxlRGVsZXRlKGNvbGxlY3Rpb24sIHNsdWcsIG93blN0YXR1cyk7XG4gICAgfVxuICB9O1xuXG4gIHJlcXVlc3RQdWJsaXNoID0gKGNvbGxlY3Rpb24sIHNsdWcsIG93blN0YXR1cykgPT4ge1xuICAgIGlmIChvd25TdGF0dXMgIT09IHN0YXR1cy5sYXN0KCkpIHtcbiAgICAgIHdpbmRvdy5hbGVydCh0aGlzLnByb3BzLnQoJ3dvcmtmbG93LndvcmtmbG93TGlzdC5vblB1Ymxpc2hpbmdOb3RSZWFkeUVudHJ5JykpO1xuICAgICAgcmV0dXJuO1xuICAgIH0gZWxzZSBpZiAoIXdpbmRvdy5jb25maXJtKHRoaXMucHJvcHMudCgnd29ya2Zsb3cud29ya2Zsb3dMaXN0Lm9uUHVibGlzaEVudHJ5JykpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMucHJvcHMuaGFuZGxlUHVibGlzaChjb2xsZWN0aW9uLCBzbHVnKTtcbiAgfTtcblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QvZGlzcGxheS1uYW1lXG4gIHJlbmRlckNvbHVtbnMgPSAoZW50cmllcywgY29sdW1uKSA9PiB7XG4gICAgY29uc3QgeyBpc09wZW5BdXRob3JpbmcgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKCFlbnRyaWVzKSByZXR1cm4gbnVsbDtcblxuICAgIGlmICghY29sdW1uKSB7XG4gICAgICByZXR1cm4gZW50cmllcy5lbnRyeVNlcSgpLm1hcCgoW2N1cnJDb2x1bW4sIGN1cnJFbnRyaWVzXSwgaWR4KSA9PiAoXG4gICAgICAgIDxEcm9wVGFyZ2V0XG4gICAgICAgICAgbmFtZXNwYWNlPXtETkROYW1lc3BhY2V9XG4gICAgICAgICAga2V5PXtjdXJyQ29sdW1ufVxuICAgICAgICAgIG9uRHJvcD17dGhpcy5oYW5kbGVDaGFuZ2VTdGF0dXMuYmluZCh0aGlzLCBjdXJyQ29sdW1uKX1cbiAgICAgICAgPlxuICAgICAgICAgIHsoY29ubmVjdCwgeyBpc0hvdmVyZWQgfSkgPT5cbiAgICAgICAgICAgIGNvbm5lY3QoXG4gICAgICAgICAgICAgIDxkaXYgc3R5bGU9e3sgaGVpZ2h0OiAnMTAwJScgfX0+XG4gICAgICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgICAgY3NzPXtbXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlcy5jb2x1bW4sXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlcy5jb2x1bW5Qb3NpdGlvbihpZHgpLFxuICAgICAgICAgICAgICAgICAgICBpc0hvdmVyZWQgJiYgc3R5bGVzLmNvbHVtbkhvdmVyZWQsXG4gICAgICAgICAgICAgICAgICAgIGlzT3BlbkF1dGhvcmluZyAmJiBjdXJyQ29sdW1uID09PSAncGVuZGluZ19wdWJsaXNoJyAmJiBzdHlsZXMuaGlkZGVuQ29sdW1uLFxuICAgICAgICAgICAgICAgICAgICBpc09wZW5BdXRob3JpbmcgJiYgY3VyckNvbHVtbiA9PT0gJ3BlbmRpbmdfcmV2aWV3JyAmJiBzdHlsZXMuaGlkZGVuUmlnaHRCb3JkZXIsXG4gICAgICAgICAgICAgICAgICBdfVxuICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDxDb2x1bW5IZWFkZXIgbmFtZT17Y3VyckNvbHVtbn0+XG4gICAgICAgICAgICAgICAgICAgIHtnZXRDb2x1bW5IZWFkZXJUZXh0KGN1cnJDb2x1bW4sIHRoaXMucHJvcHMudCl9XG4gICAgICAgICAgICAgICAgICA8L0NvbHVtbkhlYWRlcj5cbiAgICAgICAgICAgICAgICAgIDxDb2x1bW5Db3VudD5cbiAgICAgICAgICAgICAgICAgICAge3RoaXMucHJvcHMudCgnd29ya2Zsb3cud29ya2Zsb3dMaXN0LmN1cnJlbnRFbnRyaWVzJywge1xuICAgICAgICAgICAgICAgICAgICAgIHNtYXJ0X2NvdW50OiBjdXJyRW50cmllcy5zaXplLFxuICAgICAgICAgICAgICAgICAgICB9KX1cbiAgICAgICAgICAgICAgICAgIDwvQ29sdW1uQ291bnQ+XG4gICAgICAgICAgICAgICAgICB7dGhpcy5yZW5kZXJDb2x1bW5zKGN1cnJFbnRyaWVzLCBjdXJyQ29sdW1uKX1cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9kaXY+LFxuICAgICAgICAgICAgKVxuICAgICAgICAgIH1cbiAgICAgICAgPC9Ecm9wVGFyZ2V0PlxuICAgICAgKSk7XG4gICAgfVxuICAgIHJldHVybiAoXG4gICAgICA8ZGl2PlxuICAgICAgICB7ZW50cmllcy5tYXAoZW50cnkgPT4ge1xuICAgICAgICAgIGNvbnN0IHRpbWVzdGFtcCA9IG1vbWVudChlbnRyeS5nZXRJbihbJ21ldGFEYXRhJywgJ3RpbWVTdGFtcCddKSkuZm9ybWF0KCdNTU1NIEQnKTtcbiAgICAgICAgICBjb25zdCBlZGl0TGluayA9IGBjb2xsZWN0aW9ucy8ke2VudHJ5LmdldEluKFtcbiAgICAgICAgICAgICdtZXRhRGF0YScsXG4gICAgICAgICAgICAnY29sbGVjdGlvbicsXG4gICAgICAgICAgXSl9L2VudHJpZXMvJHtlbnRyeS5nZXQoJ3NsdWcnKX1gO1xuICAgICAgICAgIGNvbnN0IHNsdWcgPSBlbnRyeS5nZXQoJ3NsdWcnKTtcbiAgICAgICAgICBjb25zdCBvd25TdGF0dXMgPSBlbnRyeS5nZXRJbihbJ21ldGFEYXRhJywgJ3N0YXR1cyddKTtcbiAgICAgICAgICBjb25zdCBjb2xsZWN0aW9uID0gZW50cnkuZ2V0SW4oWydtZXRhRGF0YScsICdjb2xsZWN0aW9uJ10pO1xuICAgICAgICAgIGNvbnN0IGlzTW9kaWZpY2F0aW9uID0gZW50cnkuZ2V0KCdpc01vZGlmaWNhdGlvbicpO1xuICAgICAgICAgIGNvbnN0IGNhblB1Ymxpc2ggPSBvd25TdGF0dXMgPT09IHN0YXR1cy5sYXN0KCkgJiYgIWVudHJ5LmdldCgnaXNQZXJzaXN0aW5nJywgZmFsc2UpO1xuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8RHJhZ1NvdXJjZVxuICAgICAgICAgICAgICBuYW1lc3BhY2U9e0RORE5hbWVzcGFjZX1cbiAgICAgICAgICAgICAga2V5PXtgJHtjb2xsZWN0aW9ufS0ke3NsdWd9YH1cbiAgICAgICAgICAgICAgc2x1Zz17c2x1Z31cbiAgICAgICAgICAgICAgY29sbGVjdGlvbj17Y29sbGVjdGlvbn1cbiAgICAgICAgICAgICAgb3duU3RhdHVzPXtvd25TdGF0dXN9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIHtjb25uZWN0ID0+XG4gICAgICAgICAgICAgICAgY29ubmVjdChcbiAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgIDxXb3JrZmxvd0NhcmRcbiAgICAgICAgICAgICAgICAgICAgICBjb2xsZWN0aW9uTmFtZT17Y29sbGVjdGlvbn1cbiAgICAgICAgICAgICAgICAgICAgICB0aXRsZT17ZW50cnkuZ2V0SW4oWydkYXRhJywgJ3RpdGxlJ10pfVxuICAgICAgICAgICAgICAgICAgICAgIGF1dGhvckxhc3RDaGFuZ2U9e2VudHJ5LmdldEluKFsnbWV0YURhdGEnLCAndXNlciddKX1cbiAgICAgICAgICAgICAgICAgICAgICBib2R5PXtlbnRyeS5nZXRJbihbJ2RhdGEnLCAnYm9keSddKX1cbiAgICAgICAgICAgICAgICAgICAgICBpc01vZGlmaWNhdGlvbj17aXNNb2RpZmljYXRpb259XG4gICAgICAgICAgICAgICAgICAgICAgZWRpdExpbms9e2VkaXRMaW5rfVxuICAgICAgICAgICAgICAgICAgICAgIHRpbWVzdGFtcD17dGltZXN0YW1wfVxuICAgICAgICAgICAgICAgICAgICAgIG9uRGVsZXRlPXt0aGlzLnJlcXVlc3REZWxldGUuYmluZCh0aGlzLCBjb2xsZWN0aW9uLCBzbHVnLCBvd25TdGF0dXMpfVxuICAgICAgICAgICAgICAgICAgICAgIGNhblB1Ymxpc2g9e2NhblB1Ymxpc2h9XG4gICAgICAgICAgICAgICAgICAgICAgb25QdWJsaXNoPXt0aGlzLnJlcXVlc3RQdWJsaXNoLmJpbmQodGhpcywgY29sbGVjdGlvbiwgc2x1Zywgb3duU3RhdHVzKX1cbiAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PixcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDwvRHJhZ1NvdXJjZT5cbiAgICAgICAgICApO1xuICAgICAgICB9KX1cbiAgICAgIDwvZGl2PlxuICAgICk7XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IGNvbHVtbnMgPSB0aGlzLnJlbmRlckNvbHVtbnModGhpcy5wcm9wcy5lbnRyaWVzKTtcbiAgICBjb25zdCBMaXN0Q29udGFpbmVyID0gdGhpcy5wcm9wcy5pc09wZW5BdXRob3JpbmdcbiAgICAgID8gV29ya2Zsb3dMaXN0Q29udGFpbmVyT3BlbkF1dGhvcmluZ1xuICAgICAgOiBXb3JrZmxvd0xpc3RDb250YWluZXI7XG4gICAgcmV0dXJuIDxMaXN0Q29udGFpbmVyPntjb2x1bW5zfTwvTGlzdENvbnRhaW5lcj47XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgSFRNTDVEcmFnRHJvcCh0cmFuc2xhdGUoKShXb3JrZmxvd0xpc3QpKTtcbiJdfQ== */"
};

var _ref2 = process.env.NODE_ENV === "production" ? {
  name: "1xzanuf",
  styles: "margin-right:0;"
} : {
  name: "1xzanuf",
  styles: "margin-right:0;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
};

const styles = {
  columnPosition: idx => idx === 0 && _ref || idx === 2 && _ref2 ||
  /*#__PURE__*/
  (0, _core.css)("&:before,&:after{content:'';display:block;position:absolute;width:2px;height:80%;top:76px;background-color:", _netlifyCmsUiDefault.colors.textFieldBorder, ";}&:before{left:-23px;}&:after{right:-23px;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
  column: process.env.NODE_ENV === "production" ? {
    name: "f8lkbe-column",
    styles: "margin:0 20px;transition:background-color 0.5s ease;border:2px dashed transparent;border-radius:4px;position:relative;height:100%;;label:column;"
  } : {
    name: "f8lkbe-column",
    styles: "margin:0 20px;transition:background-color 0.5s ease;border:2px dashed transparent;border-radius:4px;position:relative;height:100%;;label:column;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
  },
  columnHovered:
  /*#__PURE__*/
  (0, _core.css)("border-color:", _netlifyCmsUiDefault.colors.active, ";;label:columnHovered;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
  hiddenColumn: process.env.NODE_ENV === "production" ? {
    name: "9wvypa-hiddenColumn",
    styles: "display:none;;label:hiddenColumn;"
  } : {
    name: "9wvypa-hiddenColumn",
    styles: "display:none;;label:hiddenColumn;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
  },
  hiddenRightBorder: process.env.NODE_ENV === "production" ? {
    name: "hg8806-hiddenRightBorder",
    styles: "&:not(:first-child):not(:last-child){&:after{display:none;}};label:hiddenRightBorder;"
  } : {
    name: "hg8806-hiddenRightBorder",
    styles: "&:not(:first-child):not(:last-child){&:after{display:none;}};label:hiddenRightBorder;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
  }
};
const ColumnHeader = (0, _styledBase.default)("h2", {
  target: "e1sboua12",
  label: "ColumnHeader"
})("font-size:20px;font-weight:normal;padding:4px 14px;border-radius:", _netlifyCmsUiDefault.lengths.borderRadius, ";margin-bottom:28px;", props => props.name === 'draft' &&
/*#__PURE__*/
(0, _core.css)("background-color:", _netlifyCmsUiDefault.colors.statusDraftBackground, ";color:", _netlifyCmsUiDefault.colors.statusDraftText, ";;label:ColumnHeader;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), " ", props => props.name === 'pending_review' &&
/*#__PURE__*/
(0, _core.css)("background-color:", _netlifyCmsUiDefault.colors.statusReviewBackground, ";color:", _netlifyCmsUiDefault.colors.statusReviewText, ";;label:ColumnHeader;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), " ", props => props.name === 'pending_publish' &&
/*#__PURE__*/
(0, _core.css)("background-color:", _netlifyCmsUiDefault.colors.statusReadyBackground, ";color:", _netlifyCmsUiDefault.colors.statusReadyText, ";;label:ColumnHeader;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")), process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */");
const ColumnCount = (0, _styledBase.default)("p", {
  target: "e1sboua13",
  label: "ColumnCount"
})("font-size:13px;font-weight:500;color:", _netlifyCmsUiDefault.colors.text, ";text-transform:uppercase;margin-bottom:6px;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")); // This is a namespace so that we can only drop these elements on a DropTarget with the same

const DNDNamespace = 'cms-workflow';

const getColumnHeaderText = (columnName, t) => {
  switch (columnName) {
    case 'draft':
      return t('workflow.workflowList.draftHeader');

    case 'pending_review':
      return t('workflow.workflowList.inReviewHeader');

    case 'pending_publish':
      return t('workflow.workflowList.readyHeader');
  }
};

class WorkflowList extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "handleChangeStatus", (newStatus, dragProps) => {
      const slug = dragProps.slug;
      const collection = dragProps.collection;
      const oldStatus = dragProps.ownStatus;
      this.props.handleChangeStatus(collection, slug, oldStatus, newStatus);
    });

    _defineProperty(this, "requestDelete", (collection, slug, ownStatus) => {
      if (window.confirm(this.props.t('workflow.workflowList.onDeleteEntry'))) {
        this.props.handleDelete(collection, slug, ownStatus);
      }
    });

    _defineProperty(this, "requestPublish", (collection, slug, ownStatus) => {
      if (ownStatus !== _publishModes.status.last()) {
        window.alert(this.props.t('workflow.workflowList.onPublishingNotReadyEntry'));
        return;
      } else if (!window.confirm(this.props.t('workflow.workflowList.onPublishEntry'))) {
        return;
      }

      this.props.handlePublish(collection, slug);
    });

    _defineProperty(this, "renderColumns", (entries, column) => {
      const {
        isOpenAuthoring
      } = this.props;
      if (!entries) return null;

      if (!column) {
        return entries.entrySeq().map((_ref3, idx) => {
          let [currColumn, currEntries] = _ref3;
          return (0, _core.jsx)(_UI.DropTarget, {
            namespace: DNDNamespace,
            key: currColumn,
            onDrop: this.handleChangeStatus.bind(this, currColumn)
          }, (connect, _ref4) => {
            let {
              isHovered
            } = _ref4;
            return connect((0, _core.jsx)("div", {
              style: {
                height: '100%'
              }
            }, (0, _core.jsx)("div", {
              css:
              /*#__PURE__*/
              (0, _css2.default)([styles.column, styles.columnPosition(idx), isHovered && styles.columnHovered, isOpenAuthoring && currColumn === 'pending_publish' && styles.hiddenColumn, isOpenAuthoring && currColumn === 'pending_review' && styles.hiddenRightBorder], ";label:WorkflowList;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
            }, (0, _core.jsx)(ColumnHeader, {
              name: currColumn
            }, getColumnHeaderText(currColumn, this.props.t)), (0, _core.jsx)(ColumnCount, null, this.props.t('workflow.workflowList.currentEntries', {
              smart_count: currEntries.size
            })), this.renderColumns(currEntries, currColumn))));
          });
        });
      }

      return (0, _core.jsx)("div", null, entries.map(entry => {
        const timestamp = (0, _moment.default)(entry.getIn(['metaData', 'timeStamp'])).format('MMMM D');
        const editLink = "collections/".concat(entry.getIn(['metaData', 'collection']), "/entries/").concat(entry.get('slug'));
        const slug = entry.get('slug');
        const ownStatus = entry.getIn(['metaData', 'status']);
        const collection = entry.getIn(['metaData', 'collection']);
        const isModification = entry.get('isModification');
        const canPublish = ownStatus === _publishModes.status.last() && !entry.get('isPersisting', false);
        return (0, _core.jsx)(_UI.DragSource, {
          namespace: DNDNamespace,
          key: "".concat(collection, "-").concat(slug),
          slug: slug,
          collection: collection,
          ownStatus: ownStatus
        }, connect => connect((0, _core.jsx)("div", null, (0, _core.jsx)(_WorkflowCard.default, {
          collectionName: collection,
          title: entry.getIn(['data', 'title']),
          authorLastChange: entry.getIn(['metaData', 'user']),
          body: entry.getIn(['data', 'body']),
          isModification: isModification,
          editLink: editLink,
          timestamp: timestamp,
          onDelete: this.requestDelete.bind(this, collection, slug, ownStatus),
          canPublish: canPublish,
          onPublish: this.requestPublish.bind(this, collection, slug, ownStatus)
        }))));
      }));
    });
  }

  render() {
    const columns = this.renderColumns(this.props.entries);
    const ListContainer = this.props.isOpenAuthoring ? WorkflowListContainerOpenAuthoring : WorkflowListContainer;
    return (0, _core.jsx)(ListContainer, null, columns);
  }

}

_defineProperty(WorkflowList, "propTypes", {
  entries: _reactImmutableProptypes.default.orderedMap,
  handleChangeStatus: _propTypes.default.func.isRequired,
  handlePublish: _propTypes.default.func.isRequired,
  handleDelete: _propTypes.default.func.isRequired,
  t: _propTypes.default.func.isRequired,
  isOpenAuthoring: _propTypes.default.bool
});

var _default = (0, _UI.HTML5DragDrop)((0, _reactPolyglot.translate)()(WorkflowList));

exports.default = _default;