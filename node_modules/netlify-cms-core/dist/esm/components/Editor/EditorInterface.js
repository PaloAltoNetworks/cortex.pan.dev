"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _styledBase = _interopRequireDefault(require("@emotion/styled-base"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _react = _interopRequireWildcard(require("react"));

var _reactImmutableProptypes = _interopRequireDefault(require("react-immutable-proptypes"));

var _core = require("@emotion/core");

var _reactSplitPane = _interopRequireDefault(require("react-split-pane"));

var _netlifyCmsUiDefault = require("netlify-cms-ui-default");

var _reactScrollSync = require("react-scroll-sync");

var _EditorControlPane = _interopRequireDefault(require("./EditorControlPane/EditorControlPane"));

var _EditorPreviewPane = _interopRequireDefault(require("./EditorPreviewPane/EditorPreviewPane"));

var _EditorToolbar = _interopRequireDefault(require("./EditorToolbar"));

var _EditorToggle = _interopRequireDefault(require("./EditorToggle"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const PREVIEW_VISIBLE = 'cms.preview-visible';
const SCROLL_SYNC_ENABLED = 'cms.scroll-sync-enabled';
const SPLIT_PANE_POSITION = 'cms.split-pane-position';
const styles = {
  splitPane:
  /*#__PURE__*/
  (0, _core.css)(_netlifyCmsUiDefault.components.card, ";border-radius:0;height:100%;;label:splitPane;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */")),
  pane: process.env.NODE_ENV === "production" ? {
    name: "nq3sgi-pane",
    styles: "height:100%;overflow-y:auto;;label:pane;"
  } : {
    name: "nq3sgi-pane",
    styles: "height:100%;overflow-y:auto;;label:pane;",
    map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
  }
};

const ReactSplitPaneGlobalStyles = () => _react.default.createElement(_core.Global, {
  styles:
  /*#__PURE__*/
  (0, _core.css)(".Resizer.vertical{width:21px;cursor:col-resize;position:relative;transition:background-color ", _netlifyCmsUiDefault.transitions.main, ";&:before{content:'';width:2px;height:100%;position:relative;left:10px;background-color:", _netlifyCmsUiDefault.colors.textFieldBorder, ";display:block;}&:hover,&:active{background-color:", _netlifyCmsUiDefault.colorsRaw.GrayLight, ";}};label:ReactSplitPaneGlobalStyles;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"))
});

const StyledSplitPane = (
/*#__PURE__*/
0, _styledBase.default)(_reactSplitPane.default, {
  target: "e1pxf6c40",
  label: "StyledSplitPane"
})(styles.splitPane, ";.Pane{height:100%;}" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const NoPreviewContainer = (0, _styledBase.default)("div", {
  target: "e1pxf6c41",
  label: "NoPreviewContainer"
})(styles.splitPane, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9jb21wb25lbnRzL0VkaXRvci9FZGl0b3JJbnRlcmZhY2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBb0VxQyIsImZpbGUiOiIuLi8uLi8uLi8uLi9zcmMvY29tcG9uZW50cy9FZGl0b3IvRWRpdG9ySW50ZXJmYWNlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCBSZWFjdCwgeyBDb21wb25lbnQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgSW1tdXRhYmxlUHJvcFR5cGVzIGZyb20gJ3JlYWN0LWltbXV0YWJsZS1wcm9wdHlwZXMnO1xuaW1wb3J0IHsgY3NzLCBHbG9iYWwgfSBmcm9tICdAZW1vdGlvbi9jb3JlJztcbmltcG9ydCBzdHlsZWQgZnJvbSAnQGVtb3Rpb24vc3R5bGVkJztcbmltcG9ydCBTcGxpdFBhbmUgZnJvbSAncmVhY3Qtc3BsaXQtcGFuZSc7XG5pbXBvcnQgeyBjb2xvcnMsIGNvbG9yc1JhdywgY29tcG9uZW50cywgdHJhbnNpdGlvbnMgfSBmcm9tICduZXRsaWZ5LWNtcy11aS1kZWZhdWx0JztcbmltcG9ydCB7IFNjcm9sbFN5bmMsIFNjcm9sbFN5bmNQYW5lIH0gZnJvbSAncmVhY3Qtc2Nyb2xsLXN5bmMnO1xuaW1wb3J0IEVkaXRvckNvbnRyb2xQYW5lIGZyb20gJy4vRWRpdG9yQ29udHJvbFBhbmUvRWRpdG9yQ29udHJvbFBhbmUnO1xuaW1wb3J0IEVkaXRvclByZXZpZXdQYW5lIGZyb20gJy4vRWRpdG9yUHJldmlld1BhbmUvRWRpdG9yUHJldmlld1BhbmUnO1xuaW1wb3J0IEVkaXRvclRvb2xiYXIgZnJvbSAnLi9FZGl0b3JUb29sYmFyJztcbmltcG9ydCBFZGl0b3JUb2dnbGUgZnJvbSAnLi9FZGl0b3JUb2dnbGUnO1xuXG5jb25zdCBQUkVWSUVXX1ZJU0lCTEUgPSAnY21zLnByZXZpZXctdmlzaWJsZSc7XG5jb25zdCBTQ1JPTExfU1lOQ19FTkFCTEVEID0gJ2Ntcy5zY3JvbGwtc3luYy1lbmFibGVkJztcbmNvbnN0IFNQTElUX1BBTkVfUE9TSVRJT04gPSAnY21zLnNwbGl0LXBhbmUtcG9zaXRpb24nO1xuXG5jb25zdCBzdHlsZXMgPSB7XG4gIHNwbGl0UGFuZTogY3NzYFxuICAgICR7Y29tcG9uZW50cy5jYXJkfTtcbiAgICBib3JkZXItcmFkaXVzOiAwO1xuICAgIGhlaWdodDogMTAwJTtcbiAgYCxcbiAgcGFuZTogY3NzYFxuICAgIGhlaWdodDogMTAwJTtcbiAgICBvdmVyZmxvdy15OiBhdXRvO1xuICBgLFxufTtcblxuY29uc3QgUmVhY3RTcGxpdFBhbmVHbG9iYWxTdHlsZXMgPSAoKSA9PiAoXG4gIDxHbG9iYWxcbiAgICBzdHlsZXM9e2Nzc2BcbiAgICAgIC5SZXNpemVyLnZlcnRpY2FsIHtcbiAgICAgICAgd2lkdGg6IDIxcHg7XG4gICAgICAgIGN1cnNvcjogY29sLXJlc2l6ZTtcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICB0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yICR7dHJhbnNpdGlvbnMubWFpbn07XG5cbiAgICAgICAgJjpiZWZvcmUge1xuICAgICAgICAgIGNvbnRlbnQ6ICcnO1xuICAgICAgICAgIHdpZHRoOiAycHg7XG4gICAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICAgICAgICBsZWZ0OiAxMHB4O1xuICAgICAgICAgIGJhY2tncm91bmQtY29sb3I6ICR7Y29sb3JzLnRleHRGaWVsZEJvcmRlcn07XG4gICAgICAgICAgZGlzcGxheTogYmxvY2s7XG4gICAgICAgIH1cblxuICAgICAgICAmOmhvdmVyLFxuICAgICAgICAmOmFjdGl2ZSB7XG4gICAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJHtjb2xvcnNSYXcuR3JheUxpZ2h0fTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIGB9XG4gIC8+XG4pO1xuXG5jb25zdCBTdHlsZWRTcGxpdFBhbmUgPSBzdHlsZWQoU3BsaXRQYW5lKWBcbiAgJHtzdHlsZXMuc3BsaXRQYW5lfTtcblxuICAvKipcbiAgICogUXVpY2sgZml4IGZvciBwcmV2aWV3IHBhbmUgbm90IGZ1bGx5IGRpc3BsYXlpbmcgaW4gU2FmYXJpXG4gICAqL1xuICAuUGFuZSB7XG4gICAgaGVpZ2h0OiAxMDAlO1xuICB9XG5gO1xuXG5jb25zdCBOb1ByZXZpZXdDb250YWluZXIgPSBzdHlsZWQuZGl2YFxuICAke3N0eWxlcy5zcGxpdFBhbmV9O1xuYDtcblxuY29uc3QgRWRpdG9yQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgd2lkdGg6IDEwMCU7XG4gIG1pbi13aWR0aDogODAwcHg7XG4gIGhlaWdodDogMTAwJTtcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDA7XG4gIGxlZnQ6IDA7XG4gIG92ZXJmbG93OiBoaWRkZW47XG4gIHBhZGRpbmctdG9wOiA2NnB4O1xuICBiYWNrZ3JvdW5kLWNvbG9yOiAke2NvbG9ycy5iYWNrZ3JvdW5kfTtcbmA7XG5cbmNvbnN0IEVkaXRvciA9IHN0eWxlZC5kaXZgXG4gIGhlaWdodDogMTAwJTtcbiAgbWFyZ2luOiAwIGF1dG87XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbmA7XG5cbmNvbnN0IFByZXZpZXdQYW5lQ29udGFpbmVyID0gc3R5bGVkLmRpdmBcbiAgaGVpZ2h0OiAxMDAlO1xuICBvdmVyZmxvdy15OiBhdXRvO1xuICBwb2ludGVyLWV2ZW50czogJHtwcm9wcyA9PiAocHJvcHMuYmxvY2tFbnRyeSA/ICdub25lJyA6ICdhdXRvJyl9O1xuYDtcblxuY29uc3QgQ29udHJvbFBhbmVDb250YWluZXIgPSBzdHlsZWQoUHJldmlld1BhbmVDb250YWluZXIpYFxuICBwYWRkaW5nOiAwIDE2cHg7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgb3ZlcmZsb3cteDogaGlkZGVuO1xuYDtcblxuY29uc3QgVmlld0NvbnRyb2xzID0gc3R5bGVkLmRpdmBcbiAgcG9zaXRpb246IGFic29sdXRlO1xuICB0b3A6IDEwcHg7XG4gIHJpZ2h0OiAxMHB4O1xuICB6LWluZGV4OiAyOTk7XG5gO1xuXG5jbGFzcyBFZGl0b3JJbnRlcmZhY2UgZXh0ZW5kcyBDb21wb25lbnQge1xuICBzdGF0ZSA9IHtcbiAgICBzaG93RXZlbnRCbG9ja2VyOiBmYWxzZSxcbiAgICBwcmV2aWV3VmlzaWJsZTogbG9jYWxTdG9yYWdlLmdldEl0ZW0oUFJFVklFV19WSVNJQkxFKSAhPT0gJ2ZhbHNlJyxcbiAgICBzY3JvbGxTeW5jRW5hYmxlZDogbG9jYWxTdG9yYWdlLmdldEl0ZW0oU0NST0xMX1NZTkNfRU5BQkxFRCkgIT09ICdmYWxzZScsXG4gIH07XG5cbiAgaGFuZGxlU3BsaXRQYW5lRHJhZ1N0YXJ0ID0gKCkgPT4ge1xuICAgIHRoaXMuc2V0U3RhdGUoeyBzaG93RXZlbnRCbG9ja2VyOiB0cnVlIH0pO1xuICB9O1xuXG4gIGhhbmRsZVNwbGl0UGFuZURyYWdGaW5pc2hlZCA9ICgpID0+IHtcbiAgICB0aGlzLnNldFN0YXRlKHsgc2hvd0V2ZW50QmxvY2tlcjogZmFsc2UgfSk7XG4gIH07XG5cbiAgaGFuZGxlT25QZXJzaXN0ID0gKG9wdHMgPSB7fSkgPT4ge1xuICAgIGNvbnN0IHsgY3JlYXRlTmV3ID0gZmFsc2UgfSA9IG9wdHM7XG4gICAgdGhpcy5jb250cm9sUGFuZVJlZi52YWxpZGF0ZSgpO1xuICAgIHRoaXMucHJvcHMub25QZXJzaXN0KHsgY3JlYXRlTmV3IH0pO1xuICB9O1xuXG4gIGhhbmRsZU9uUHVibGlzaCA9IChvcHRzID0ge30pID0+IHtcbiAgICBjb25zdCB7IGNyZWF0ZU5ldyA9IGZhbHNlIH0gPSBvcHRzO1xuICAgIHRoaXMuY29udHJvbFBhbmVSZWYudmFsaWRhdGUoKTtcbiAgICB0aGlzLnByb3BzLm9uUHVibGlzaCh7IGNyZWF0ZU5ldyB9KTtcbiAgfTtcblxuICBoYW5kbGVUb2dnbGVQcmV2aWV3ID0gKCkgPT4ge1xuICAgIGNvbnN0IG5ld1ByZXZpZXdWaXNpYmxlID0gIXRoaXMuc3RhdGUucHJldmlld1Zpc2libGU7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHByZXZpZXdWaXNpYmxlOiBuZXdQcmV2aWV3VmlzaWJsZSB9KTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShQUkVWSUVXX1ZJU0lCTEUsIG5ld1ByZXZpZXdWaXNpYmxlKTtcbiAgfTtcblxuICBoYW5kbGVUb2dnbGVTY3JvbGxTeW5jID0gKCkgPT4ge1xuICAgIGNvbnN0IG5ld1Njcm9sbFN5bmNFbmFibGVkID0gIXRoaXMuc3RhdGUuc2Nyb2xsU3luY0VuYWJsZWQ7XG4gICAgdGhpcy5zZXRTdGF0ZSh7IHNjcm9sbFN5bmNFbmFibGVkOiBuZXdTY3JvbGxTeW5jRW5hYmxlZCB9KTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShTQ1JPTExfU1lOQ19FTkFCTEVELCBuZXdTY3JvbGxTeW5jRW5hYmxlZCk7XG4gIH07XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IHtcbiAgICAgIGNvbGxlY3Rpb24sXG4gICAgICBlbnRyeSxcbiAgICAgIGZpZWxkcyxcbiAgICAgIGZpZWxkc01ldGFEYXRhLFxuICAgICAgZmllbGRzRXJyb3JzLFxuICAgICAgZ2V0QXNzZXQsXG4gICAgICBvbkNoYW5nZSxcbiAgICAgIHNob3dEZWxldGUsXG4gICAgICBvbkRlbGV0ZSxcbiAgICAgIG9uRGVsZXRlVW5wdWJsaXNoZWRDaGFuZ2VzLFxuICAgICAgb25DaGFuZ2VTdGF0dXMsXG4gICAgICBvblB1Ymxpc2gsXG4gICAgICBvblZhbGlkYXRlLFxuICAgICAgdXNlcixcbiAgICAgIGhhc0NoYW5nZWQsXG4gICAgICBkaXNwbGF5VXJsLFxuICAgICAgaGFzV29ya2Zsb3csXG4gICAgICB1c2VPcGVuQXV0aG9yaW5nLFxuICAgICAgaGFzVW5wdWJsaXNoZWRDaGFuZ2VzLFxuICAgICAgaXNOZXdFbnRyeSxcbiAgICAgIGlzTW9kaWZpY2F0aW9uLFxuICAgICAgY3VycmVudFN0YXR1cyxcbiAgICAgIG9uTG9nb3V0Q2xpY2ssXG4gICAgICBsb2FkRGVwbG95UHJldmlldyxcbiAgICAgIGRlcGxveVByZXZpZXcsXG4gICAgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCB7IHByZXZpZXdWaXNpYmxlLCBzY3JvbGxTeW5jRW5hYmxlZCwgc2hvd0V2ZW50QmxvY2tlciB9ID0gdGhpcy5zdGF0ZTtcblxuICAgIGNvbnN0IGNvbGxlY3Rpb25QcmV2aWV3RW5hYmxlZCA9IGNvbGxlY3Rpb24uZ2V0SW4oWydlZGl0b3InLCAncHJldmlldyddLCB0cnVlKTtcblxuICAgIGNvbnN0IGVkaXRvciA9IChcbiAgICAgIDxDb250cm9sUGFuZUNvbnRhaW5lciBibG9ja0VudHJ5PXtzaG93RXZlbnRCbG9ja2VyfT5cbiAgICAgICAgPEVkaXRvckNvbnRyb2xQYW5lXG4gICAgICAgICAgY29sbGVjdGlvbj17Y29sbGVjdGlvbn1cbiAgICAgICAgICBlbnRyeT17ZW50cnl9XG4gICAgICAgICAgZmllbGRzPXtmaWVsZHN9XG4gICAgICAgICAgZmllbGRzTWV0YURhdGE9e2ZpZWxkc01ldGFEYXRhfVxuICAgICAgICAgIGZpZWxkc0Vycm9ycz17ZmllbGRzRXJyb3JzfVxuICAgICAgICAgIG9uQ2hhbmdlPXtvbkNoYW5nZX1cbiAgICAgICAgICBvblZhbGlkYXRlPXtvblZhbGlkYXRlfVxuICAgICAgICAgIHJlZj17YyA9PiAodGhpcy5jb250cm9sUGFuZVJlZiA9IGMpfVxuICAgICAgICAvPlxuICAgICAgPC9Db250cm9sUGFuZUNvbnRhaW5lcj5cbiAgICApO1xuXG4gICAgY29uc3QgZWRpdG9yV2l0aFByZXZpZXcgPSAoXG4gICAgICA8U2Nyb2xsU3luYyBlbmFibGVkPXt0aGlzLnN0YXRlLnNjcm9sbFN5bmNFbmFibGVkfT5cbiAgICAgICAgPGRpdj5cbiAgICAgICAgICA8UmVhY3RTcGxpdFBhbmVHbG9iYWxTdHlsZXMgLz5cbiAgICAgICAgICA8U3R5bGVkU3BsaXRQYW5lXG4gICAgICAgICAgICBtYXhTaXplPXstMTAwfVxuICAgICAgICAgICAgZGVmYXVsdFNpemU9e3BhcnNlSW50KGxvY2FsU3RvcmFnZS5nZXRJdGVtKFNQTElUX1BBTkVfUE9TSVRJT04pLCAxMCkgfHwgJzUwJSd9XG4gICAgICAgICAgICBvbkNoYW5nZT17c2l6ZSA9PiBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShTUExJVF9QQU5FX1BPU0lUSU9OLCBzaXplKX1cbiAgICAgICAgICAgIG9uRHJhZ1N0YXJ0ZWQ9e3RoaXMuaGFuZGxlU3BsaXRQYW5lRHJhZ1N0YXJ0fVxuICAgICAgICAgICAgb25EcmFnRmluaXNoZWQ9e3RoaXMuaGFuZGxlU3BsaXRQYW5lRHJhZ0ZpbmlzaGVkfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxTY3JvbGxTeW5jUGFuZT57ZWRpdG9yfTwvU2Nyb2xsU3luY1BhbmU+XG4gICAgICAgICAgICA8UHJldmlld1BhbmVDb250YWluZXIgYmxvY2tFbnRyeT17c2hvd0V2ZW50QmxvY2tlcn0+XG4gICAgICAgICAgICAgIDxFZGl0b3JQcmV2aWV3UGFuZVxuICAgICAgICAgICAgICAgIGNvbGxlY3Rpb249e2NvbGxlY3Rpb259XG4gICAgICAgICAgICAgICAgZW50cnk9e2VudHJ5fVxuICAgICAgICAgICAgICAgIGZpZWxkcz17ZmllbGRzfVxuICAgICAgICAgICAgICAgIGZpZWxkc01ldGFEYXRhPXtmaWVsZHNNZXRhRGF0YX1cbiAgICAgICAgICAgICAgICBnZXRBc3NldD17Z2V0QXNzZXR9XG4gICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICA8L1ByZXZpZXdQYW5lQ29udGFpbmVyPlxuICAgICAgICAgIDwvU3R5bGVkU3BsaXRQYW5lPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvU2Nyb2xsU3luYz5cbiAgICApO1xuXG4gICAgcmV0dXJuIChcbiAgICAgIDxFZGl0b3JDb250YWluZXI+XG4gICAgICAgIDxFZGl0b3JUb29sYmFyXG4gICAgICAgICAgaXNQZXJzaXN0aW5nPXtlbnRyeS5nZXQoJ2lzUGVyc2lzdGluZycpfVxuICAgICAgICAgIGlzUHVibGlzaGluZz17ZW50cnkuZ2V0KCdpc1B1Ymxpc2hpbmcnKX1cbiAgICAgICAgICBpc1VwZGF0aW5nU3RhdHVzPXtlbnRyeS5nZXQoJ2lzVXBkYXRpbmdTdGF0dXMnKX1cbiAgICAgICAgICBpc0RlbGV0aW5nPXtlbnRyeS5nZXQoJ2lzRGVsZXRpbmcnKX1cbiAgICAgICAgICBvblBlcnNpc3Q9e3RoaXMuaGFuZGxlT25QZXJzaXN0fVxuICAgICAgICAgIG9uUGVyc2lzdEFuZE5ldz17KCkgPT4gdGhpcy5oYW5kbGVPblBlcnNpc3QoeyBjcmVhdGVOZXc6IHRydWUgfSl9XG4gICAgICAgICAgb25EZWxldGU9e29uRGVsZXRlfVxuICAgICAgICAgIG9uRGVsZXRlVW5wdWJsaXNoZWRDaGFuZ2VzPXtvbkRlbGV0ZVVucHVibGlzaGVkQ2hhbmdlc31cbiAgICAgICAgICBvbkNoYW5nZVN0YXR1cz17b25DaGFuZ2VTdGF0dXN9XG4gICAgICAgICAgc2hvd0RlbGV0ZT17c2hvd0RlbGV0ZX1cbiAgICAgICAgICBvblB1Ymxpc2g9e29uUHVibGlzaH1cbiAgICAgICAgICBvblB1Ymxpc2hBbmROZXc9eygpID0+IHRoaXMuaGFuZGxlT25QdWJsaXNoKHsgY3JlYXRlTmV3OiB0cnVlIH0pfVxuICAgICAgICAgIHVzZXI9e3VzZXJ9XG4gICAgICAgICAgaGFzQ2hhbmdlZD17aGFzQ2hhbmdlZH1cbiAgICAgICAgICBkaXNwbGF5VXJsPXtkaXNwbGF5VXJsfVxuICAgICAgICAgIGNvbGxlY3Rpb249e2NvbGxlY3Rpb259XG4gICAgICAgICAgaGFzV29ya2Zsb3c9e2hhc1dvcmtmbG93fVxuICAgICAgICAgIHVzZU9wZW5BdXRob3Jpbmc9e3VzZU9wZW5BdXRob3Jpbmd9XG4gICAgICAgICAgaGFzVW5wdWJsaXNoZWRDaGFuZ2VzPXtoYXNVbnB1Ymxpc2hlZENoYW5nZXN9XG4gICAgICAgICAgaXNOZXdFbnRyeT17aXNOZXdFbnRyeX1cbiAgICAgICAgICBpc01vZGlmaWNhdGlvbj17aXNNb2RpZmljYXRpb259XG4gICAgICAgICAgY3VycmVudFN0YXR1cz17Y3VycmVudFN0YXR1c31cbiAgICAgICAgICBvbkxvZ291dENsaWNrPXtvbkxvZ291dENsaWNrfVxuICAgICAgICAgIGxvYWREZXBsb3lQcmV2aWV3PXtsb2FkRGVwbG95UHJldmlld31cbiAgICAgICAgICBkZXBsb3lQcmV2aWV3PXtkZXBsb3lQcmV2aWV3fVxuICAgICAgICAvPlxuICAgICAgICA8RWRpdG9yPlxuICAgICAgICAgIDxWaWV3Q29udHJvbHM+XG4gICAgICAgICAgICA8RWRpdG9yVG9nZ2xlXG4gICAgICAgICAgICAgIGVuYWJsZWQ9e2NvbGxlY3Rpb25QcmV2aWV3RW5hYmxlZH1cbiAgICAgICAgICAgICAgYWN0aXZlPXtwcmV2aWV3VmlzaWJsZX1cbiAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5oYW5kbGVUb2dnbGVQcmV2aWV3fVxuICAgICAgICAgICAgICBpY29uPVwiZXllXCJcbiAgICAgICAgICAgICAgdGl0bGU9XCJUb2dnbGUgcHJldmlld1wiXG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPEVkaXRvclRvZ2dsZVxuICAgICAgICAgICAgICBlbmFibGVkPXtjb2xsZWN0aW9uUHJldmlld0VuYWJsZWQgJiYgcHJldmlld1Zpc2libGV9XG4gICAgICAgICAgICAgIGFjdGl2ZT17c2Nyb2xsU3luY0VuYWJsZWR9XG4gICAgICAgICAgICAgIG9uQ2xpY2s9e3RoaXMuaGFuZGxlVG9nZ2xlU2Nyb2xsU3luY31cbiAgICAgICAgICAgICAgaWNvbj1cInNjcm9sbFwiXG4gICAgICAgICAgICAgIHRpdGxlPVwiU3luYyBzY3JvbGxpbmdcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICA8L1ZpZXdDb250cm9scz5cbiAgICAgICAgICB7Y29sbGVjdGlvblByZXZpZXdFbmFibGVkICYmIHRoaXMuc3RhdGUucHJldmlld1Zpc2libGUgPyAoXG4gICAgICAgICAgICBlZGl0b3JXaXRoUHJldmlld1xuICAgICAgICAgICkgOiAoXG4gICAgICAgICAgICA8Tm9QcmV2aWV3Q29udGFpbmVyPntlZGl0b3J9PC9Ob1ByZXZpZXdDb250YWluZXI+XG4gICAgICAgICAgKX1cbiAgICAgICAgPC9FZGl0b3I+XG4gICAgICA8L0VkaXRvckNvbnRhaW5lcj5cbiAgICApO1xuICB9XG59XG5cbkVkaXRvckludGVyZmFjZS5wcm9wVHlwZXMgPSB7XG4gIGNvbGxlY3Rpb246IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgZW50cnk6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgZmllbGRzOiBJbW11dGFibGVQcm9wVHlwZXMubGlzdC5pc1JlcXVpcmVkLFxuICBmaWVsZHNNZXRhRGF0YTogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICBmaWVsZHNFcnJvcnM6IEltbXV0YWJsZVByb3BUeXBlcy5tYXAuaXNSZXF1aXJlZCxcbiAgZ2V0QXNzZXQ6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIG9uQ2hhbmdlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvblZhbGlkYXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvblBlcnNpc3Q6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gIHNob3dEZWxldGU6IFByb3BUeXBlcy5ib29sLmlzUmVxdWlyZWQsXG4gIG9uRGVsZXRlOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvbkRlbGV0ZVVucHVibGlzaGVkQ2hhbmdlczogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgb25QdWJsaXNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICBvbkNoYW5nZVN0YXR1czogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgdXNlcjogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcC5pc1JlcXVpcmVkLFxuICBoYXNDaGFuZ2VkOiBQcm9wVHlwZXMuYm9vbCxcbiAgZGlzcGxheVVybDogUHJvcFR5cGVzLnN0cmluZyxcbiAgaGFzV29ya2Zsb3c6IFByb3BUeXBlcy5ib29sLFxuICB1c2VPcGVuQXV0aG9yaW5nOiBQcm9wVHlwZXMuYm9vbCxcbiAgaGFzVW5wdWJsaXNoZWRDaGFuZ2VzOiBQcm9wVHlwZXMuYm9vbCxcbiAgaXNOZXdFbnRyeTogUHJvcFR5cGVzLmJvb2wsXG4gIGlzTW9kaWZpY2F0aW9uOiBQcm9wVHlwZXMuYm9vbCxcbiAgY3VycmVudFN0YXR1czogUHJvcFR5cGVzLnN0cmluZyxcbiAgb25Mb2dvdXRDbGljazogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgZGVwbG95UHJldmlldzogSW1tdXRhYmxlUHJvcFR5cGVzLm1hcCxcbiAgbG9hZERlcGxveVByZXZpZXc6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG59O1xuXG5leHBvcnQgZGVmYXVsdCBFZGl0b3JJbnRlcmZhY2U7XG4iXX0= */"));
const EditorContainer = (0, _styledBase.default)("div", {
  target: "e1pxf6c42",
  label: "EditorContainer"
})("width:100%;min-width:800px;height:100%;position:absolute;top:0;left:0;overflow:hidden;padding-top:66px;background-color:", _netlifyCmsUiDefault.colors.background, ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const Editor = (0, _styledBase.default)("div", {
  target: "e1pxf6c43",
  label: "Editor"
})(process.env.NODE_ENV === "production" ? {
  name: "1gs40ov",
  styles: "height:100%;margin:0 auto;position:relative;"
} : {
  name: "1gs40ov",
  styles: "height:100%;margin:0 auto;position:relative;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
});
const PreviewPaneContainer = (0, _styledBase.default)("div", {
  target: "e1pxf6c44",
  label: "PreviewPaneContainer"
})("height:100%;overflow-y:auto;pointer-events:", props => props.blockEntry ? 'none' : 'auto', ";" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"));
const ControlPaneContainer = (
/*#__PURE__*/
0, _styledBase.default)(PreviewPaneContainer, {
  target: "e1pxf6c45",
  label: "ControlPaneContainer"
})(process.env.NODE_ENV === "production" ? {
  name: "pjxpm9",
  styles: "padding:0 16px;position:relative;overflow-x:hidden;"
} : {
  name: "pjxpm9",
  styles: "padding:0 16px;position:relative;overflow-x:hidden;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
});
const ViewControls = (0, _styledBase.default)("div", {
  target: "e1pxf6c46",
  label: "ViewControls"
})(process.env.NODE_ENV === "production" ? {
  name: "1hu71zb",
  styles: "position:absolute;top:10px;right:10px;z-index:299;"
} : {
  name: "1hu71zb",
  styles: "position:absolute;top:10px;right:10px;z-index:299;",
  map: "/*# sourceMappingURL=data:application/json;charset=utf-8;base64, */"
});

class EditorInterface extends _react.Component {
  constructor() {
    var _this;

    super(...arguments);
    _this = this;

    _defineProperty(this, "state", {
      showEventBlocker: false,
      previewVisible: localStorage.getItem(PREVIEW_VISIBLE) !== 'false',
      scrollSyncEnabled: localStorage.getItem(SCROLL_SYNC_ENABLED) !== 'false'
    });

    _defineProperty(this, "handleSplitPaneDragStart", () => {
      this.setState({
        showEventBlocker: true
      });
    });

    _defineProperty(this, "handleSplitPaneDragFinished", () => {
      this.setState({
        showEventBlocker: false
      });
    });

    _defineProperty(this, "handleOnPersist", function () {
      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      const {
        createNew = false
      } = opts;

      _this.controlPaneRef.validate();

      _this.props.onPersist({
        createNew
      });
    });

    _defineProperty(this, "handleOnPublish", function () {
      let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      const {
        createNew = false
      } = opts;

      _this.controlPaneRef.validate();

      _this.props.onPublish({
        createNew
      });
    });

    _defineProperty(this, "handleTogglePreview", () => {
      const newPreviewVisible = !this.state.previewVisible;
      this.setState({
        previewVisible: newPreviewVisible
      });
      localStorage.setItem(PREVIEW_VISIBLE, newPreviewVisible);
    });

    _defineProperty(this, "handleToggleScrollSync", () => {
      const newScrollSyncEnabled = !this.state.scrollSyncEnabled;
      this.setState({
        scrollSyncEnabled: newScrollSyncEnabled
      });
      localStorage.setItem(SCROLL_SYNC_ENABLED, newScrollSyncEnabled);
    });
  }

  render() {
    const {
      collection,
      entry,
      fields,
      fieldsMetaData,
      fieldsErrors,
      getAsset,
      onChange,
      showDelete,
      onDelete,
      onDeleteUnpublishedChanges,
      onChangeStatus,
      onPublish,
      onValidate,
      user,
      hasChanged,
      displayUrl,
      hasWorkflow,
      useOpenAuthoring,
      hasUnpublishedChanges,
      isNewEntry,
      isModification,
      currentStatus,
      onLogoutClick,
      loadDeployPreview,
      deployPreview
    } = this.props;
    const {
      previewVisible,
      scrollSyncEnabled,
      showEventBlocker
    } = this.state;
    const collectionPreviewEnabled = collection.getIn(['editor', 'preview'], true);

    const editor = _react.default.createElement(ControlPaneContainer, {
      blockEntry: showEventBlocker
    }, _react.default.createElement(_EditorControlPane.default, {
      collection: collection,
      entry: entry,
      fields: fields,
      fieldsMetaData: fieldsMetaData,
      fieldsErrors: fieldsErrors,
      onChange: onChange,
      onValidate: onValidate,
      ref: c => this.controlPaneRef = c
    }));

    const editorWithPreview = _react.default.createElement(_reactScrollSync.ScrollSync, {
      enabled: this.state.scrollSyncEnabled
    }, _react.default.createElement("div", null, _react.default.createElement(ReactSplitPaneGlobalStyles, null), _react.default.createElement(StyledSplitPane, {
      maxSize: -100,
      defaultSize: parseInt(localStorage.getItem(SPLIT_PANE_POSITION), 10) || '50%',
      onChange: size => localStorage.setItem(SPLIT_PANE_POSITION, size),
      onDragStarted: this.handleSplitPaneDragStart,
      onDragFinished: this.handleSplitPaneDragFinished
    }, _react.default.createElement(_reactScrollSync.ScrollSyncPane, null, editor), _react.default.createElement(PreviewPaneContainer, {
      blockEntry: showEventBlocker
    }, _react.default.createElement(_EditorPreviewPane.default, {
      collection: collection,
      entry: entry,
      fields: fields,
      fieldsMetaData: fieldsMetaData,
      getAsset: getAsset
    })))));

    return _react.default.createElement(EditorContainer, null, _react.default.createElement(_EditorToolbar.default, {
      isPersisting: entry.get('isPersisting'),
      isPublishing: entry.get('isPublishing'),
      isUpdatingStatus: entry.get('isUpdatingStatus'),
      isDeleting: entry.get('isDeleting'),
      onPersist: this.handleOnPersist,
      onPersistAndNew: () => this.handleOnPersist({
        createNew: true
      }),
      onDelete: onDelete,
      onDeleteUnpublishedChanges: onDeleteUnpublishedChanges,
      onChangeStatus: onChangeStatus,
      showDelete: showDelete,
      onPublish: onPublish,
      onPublishAndNew: () => this.handleOnPublish({
        createNew: true
      }),
      user: user,
      hasChanged: hasChanged,
      displayUrl: displayUrl,
      collection: collection,
      hasWorkflow: hasWorkflow,
      useOpenAuthoring: useOpenAuthoring,
      hasUnpublishedChanges: hasUnpublishedChanges,
      isNewEntry: isNewEntry,
      isModification: isModification,
      currentStatus: currentStatus,
      onLogoutClick: onLogoutClick,
      loadDeployPreview: loadDeployPreview,
      deployPreview: deployPreview
    }), _react.default.createElement(Editor, null, _react.default.createElement(ViewControls, null, _react.default.createElement(_EditorToggle.default, {
      enabled: collectionPreviewEnabled,
      active: previewVisible,
      onClick: this.handleTogglePreview,
      icon: "eye",
      title: "Toggle preview"
    }), _react.default.createElement(_EditorToggle.default, {
      enabled: collectionPreviewEnabled && previewVisible,
      active: scrollSyncEnabled,
      onClick: this.handleToggleScrollSync,
      icon: "scroll",
      title: "Sync scrolling"
    })), collectionPreviewEnabled && this.state.previewVisible ? editorWithPreview : _react.default.createElement(NoPreviewContainer, null, editor)));
  }

}

EditorInterface.propTypes = {
  collection: _reactImmutableProptypes.default.map.isRequired,
  entry: _reactImmutableProptypes.default.map.isRequired,
  fields: _reactImmutableProptypes.default.list.isRequired,
  fieldsMetaData: _reactImmutableProptypes.default.map.isRequired,
  fieldsErrors: _reactImmutableProptypes.default.map.isRequired,
  getAsset: _propTypes.default.func.isRequired,
  onChange: _propTypes.default.func.isRequired,
  onValidate: _propTypes.default.func.isRequired,
  onPersist: _propTypes.default.func.isRequired,
  showDelete: _propTypes.default.bool.isRequired,
  onDelete: _propTypes.default.func.isRequired,
  onDeleteUnpublishedChanges: _propTypes.default.func.isRequired,
  onPublish: _propTypes.default.func.isRequired,
  onChangeStatus: _propTypes.default.func.isRequired,
  user: _reactImmutableProptypes.default.map.isRequired,
  hasChanged: _propTypes.default.bool,
  displayUrl: _propTypes.default.string,
  hasWorkflow: _propTypes.default.bool,
  useOpenAuthoring: _propTypes.default.bool,
  hasUnpublishedChanges: _propTypes.default.bool,
  isNewEntry: _propTypes.default.bool,
  isModification: _propTypes.default.bool,
  currentStatus: _propTypes.default.string,
  onLogoutClick: _propTypes.default.func.isRequired,
  deployPreview: _reactImmutableProptypes.default.map,
  loadDeployPreview: _propTypes.default.func.isRequired
};
var _default = EditorInterface;
exports.default = _default;