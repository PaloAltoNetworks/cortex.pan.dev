{"remainingRequest":"/Users/csestito/dev/cortex.pan.dev/node_modules/babel-loader/lib/index.js??ref--4-1!/Users/csestito/dev/cortex.pan.dev/node_modules/@docusaurus/core/lib/client/preload.js","dependencies":[{"path":"/Users/csestito/dev/cortex.pan.dev/node_modules/@docusaurus/core/lib/client/preload.js","mtime":1573493609796},{"path":"/Users/csestito/dev/cortex.pan.dev/node_modules/cache-loader/dist/cjs.js","mtime":1572271624781},{"path":"/Users/csestito/dev/cortex.pan.dev/node_modules/babel-loader/lib/index.js","mtime":1572271624728}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS5pdGVyYWJsZSI7CgovKioKICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuCiAqCiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZQogKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCiAqLwppbXBvcnQgeyBtYXRjaFJvdXRlcyB9IGZyb20gJ3JlYWN0LXJvdXRlci1jb25maWcnOwovKioKICogSGVscGVyIGZ1bmN0aW9uIHRvIG1ha2Ugc3VyZSBhbGwgYXN5bmMgY29tcG9uZW50IGZvciB0aGF0IHBhcnRpY3VsYXIgcm91dGUKICogaXMgcHJlbG9hZGVkIGJlZm9yZSByZW5kZXJpbmcuIFRoaXMgaXMgZXNwZWNpYWxseSB1c2VmdWwgdG8gYXZvaWQgbG9hZGluZyBzY3JlZW5zCiAqCiAqIEBwYXJhbSB7QXJyYXk8Um91dGVDb25maWc+fSByb3V0ZXMgcmVhY3Qtcm91dGVyLWNvbmZpZwogKiBAcGFyYW0ge3N0cmluZ30gcGF0aG5hbWUgdGhlIHJvdXRlIHBhdGhuYW1lLCBleGFtcGxlOiAvZG9jcy9pbnN0YWxsYXRpb24KICogQHJldHVybnMge1Byb21pc2V9IFByb21pc2Ugb2JqZWN0IHJlcHJlc2VudHMgd2hldGhlciBwYXRobmFtZSBoYXMgYmVlbiBwcmVsb2FkZWQKICovCgpleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcmVsb2FkKHJvdXRlcywgcGF0aG5hbWUpIHsKICBjb25zdCBtYXRjaGVzID0gbWF0Y2hSb3V0ZXMocm91dGVzLCBwYXRobmFtZSk7CiAgcmV0dXJuIFByb21pc2UuYWxsKG1hdGNoZXMubWFwKG1hdGNoID0+IHsKICAgIGNvbnN0IHsKICAgICAgY29tcG9uZW50CiAgICB9ID0gbWF0Y2gucm91dGU7CgogICAgaWYgKGNvbXBvbmVudCAmJiBjb21wb25lbnQucHJlbG9hZCkgewogICAgICByZXR1cm4gY29tcG9uZW50LnByZWxvYWQoKTsKICAgIH0KCiAgICByZXR1cm4gdW5kZWZpbmVkOwogIH0pKTsKfQ=="},{"version":3,"sources":["/Users/csestito/dev/cortex.pan.dev/node_modules/@docusaurus/core/lib/client/preload.js"],"names":["matchRoutes","preload","routes","pathname","matches","Promise","all","map","match","component","route","undefined"],"mappings":";;AAAA;;;;;;AAOA,SAAQA,WAAR,QAA0B,qBAA1B;AAEA;;;;;;;;;AAQA,eAAe,SAASC,OAAT,CAAiBC,MAAjB,EAAyBC,QAAzB,EAAmC;AAChD,QAAMC,OAAO,GAAGJ,WAAW,CAACE,MAAD,EAASC,QAAT,CAA3B;AACA,SAAOE,OAAO,CAACC,GAAR,CACLF,OAAO,CAACG,GAAR,CAAYC,KAAK,IAAI;AACnB,UAAM;AAACC,MAAAA;AAAD,QAAcD,KAAK,CAACE,KAA1B;;AACA,QAAID,SAAS,IAAIA,SAAS,CAACR,OAA3B,EAAoC;AAClC,aAAOQ,SAAS,CAACR,OAAV,EAAP;AACD;;AACD,WAAOU,SAAP;AACD,GAND,CADK,CAAP;AASD","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {matchRoutes} from 'react-router-config';\n\n/**\n * Helper function to make sure all async component for that particular route\n * is preloaded before rendering. This is especially useful to avoid loading screens\n *\n * @param {Array<RouteConfig>} routes react-router-config\n * @param {string} pathname the route pathname, example: /docs/installation\n * @returns {Promise} Promise object represents whether pathname has been preloaded\n */\nexport default function preload(routes, pathname) {\n  const matches = matchRoutes(routes, pathname);\n  return Promise.all(\n    matches.map(match => {\n      const {component} = match.route;\n      if (component && component.preload) {\n        return component.preload();\n      }\n      return undefined;\n    }),\n  );\n}\n"]}]}