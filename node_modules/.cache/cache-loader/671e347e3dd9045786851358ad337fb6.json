{"remainingRequest":"/Users/sserrata/projects/cortex.pan.dev/node_modules/babel-loader/lib/index.js??ref--4-1!/Users/sserrata/projects/cortex.pan.dev/node_modules/@docusaurus/core/lib/client/preload.js","dependencies":[{"path":"/Users/sserrata/projects/cortex.pan.dev/node_modules/@docusaurus/core/lib/client/preload.js","mtime":1574264075548},{"path":"/Users/sserrata/projects/cortex.pan.dev/node_modules/cache-loader/dist/cjs.js","mtime":1571778479501},{"path":"/Users/sserrata/projects/cortex.pan.dev/node_modules/babel-loader/lib/index.js","mtime":1571778479497}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ImNvcmUtanMvbW9kdWxlcy93ZWIuZG9tLml0ZXJhYmxlIjsvKioKICogQ29weXJpZ2h0IChjKSAyMDE3LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuCiAqCiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZQogKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuCiAqL2ltcG9ydHttYXRjaFJvdXRlc31mcm9tJ3JlYWN0LXJvdXRlci1jb25maWcnOy8qKgogKiBIZWxwZXIgZnVuY3Rpb24gdG8gbWFrZSBzdXJlIGFsbCBhc3luYyBjb21wb25lbnQgZm9yIHRoYXQgcGFydGljdWxhciByb3V0ZQogKiBpcyBwcmVsb2FkZWQgYmVmb3JlIHJlbmRlcmluZy4gVGhpcyBpcyBlc3BlY2lhbGx5IHVzZWZ1bCB0byBhdm9pZCBsb2FkaW5nIHNjcmVlbnMKICoKICogQHBhcmFtIHtBcnJheTxSb3V0ZUNvbmZpZz59IHJvdXRlcyByZWFjdC1yb3V0ZXItY29uZmlnCiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRobmFtZSB0aGUgcm91dGUgcGF0aG5hbWUsIGV4YW1wbGU6IC9kb2NzL2luc3RhbGxhdGlvbgogKiBAcmV0dXJucyB7UHJvbWlzZX0gUHJvbWlzZSBvYmplY3QgcmVwcmVzZW50cyB3aGV0aGVyIHBhdGhuYW1lIGhhcyBiZWVuIHByZWxvYWRlZAogKi9leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcmVsb2FkKHJvdXRlcyxwYXRobmFtZSl7Y29uc3QgbWF0Y2hlcz1tYXRjaFJvdXRlcyhyb3V0ZXMscGF0aG5hbWUpO3JldHVybiBQcm9taXNlLmFsbChtYXRjaGVzLm1hcChtYXRjaD0+e2NvbnN0e2NvbXBvbmVudH09bWF0Y2gucm91dGU7aWYoY29tcG9uZW50JiZjb21wb25lbnQucHJlbG9hZCl7cmV0dXJuIGNvbXBvbmVudC5wcmVsb2FkKCk7fXJldHVybiB1bmRlZmluZWQ7fSkpO30="},{"version":3,"sources":["/Users/sserrata/projects/cortex.pan.dev/node_modules/@docusaurus/core/lib/client/preload.js"],"names":["matchRoutes","preload","routes","pathname","matches","Promise","all","map","match","component","route","undefined"],"mappings":"yCAAA;;;;;GAOA,OAAQA,WAAR,KAA0B,qBAA1B,CAEA;;;;;;;GAQA,cAAe,SAASC,CAAAA,OAAT,CAAiBC,MAAjB,CAAyBC,QAAzB,CAAmC,CAChD,KAAMC,CAAAA,OAAO,CAAGJ,WAAW,CAACE,MAAD,CAASC,QAAT,CAA3B,CACA,MAAOE,CAAAA,OAAO,CAACC,GAAR,CACLF,OAAO,CAACG,GAAR,CAAYC,KAAK,EAAI,CACnB,KAAM,CAACC,SAAD,EAAcD,KAAK,CAACE,KAA1B,CACA,GAAID,SAAS,EAAIA,SAAS,CAACR,OAA3B,CAAoC,CAClC,MAAOQ,CAAAA,SAAS,CAACR,OAAV,EAAP,CACD,CACD,MAAOU,CAAAA,SAAP,CACD,CAND,CADK,CAAP,CASD","sourcesContent":["/**\n * Copyright (c) 2017-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nimport {matchRoutes} from 'react-router-config';\n\n/**\n * Helper function to make sure all async component for that particular route\n * is preloaded before rendering. This is especially useful to avoid loading screens\n *\n * @param {Array<RouteConfig>} routes react-router-config\n * @param {string} pathname the route pathname, example: /docs/installation\n * @returns {Promise} Promise object represents whether pathname has been preloaded\n */\nexport default function preload(routes, pathname) {\n  const matches = matchRoutes(routes, pathname);\n  return Promise.all(\n    matches.map(match => {\n      const {component} = match.route;\n      if (component && component.preload) {\n        return component.preload();\n      }\n      return undefined;\n    }),\n  );\n}\n"]}]}