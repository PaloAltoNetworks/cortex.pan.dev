"use strict";
/**
 * Copyright (c) 2017-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const import_fresh_1 = __importDefault(require("import-fresh"));
/**
 * Check that item contains only allowed keys
 */
function assertItem(item, keys) {
    const unknownKeys = Object.keys(item).filter(key => !keys.includes(key) && key !== 'type');
    if (unknownKeys.length) {
        throw new Error(`Unknown sidebar item keys: ${unknownKeys}. Item: ${JSON.stringify(item)}`);
    }
}
/**
 * Normalizes recursively category and all its children. Ensures, that at the end
 * each item will be an object with the corresponding type
 */
function normalizeCategory(category, level = 0) {
    assertItem(category, ['items', 'label']);
    if (!Array.isArray(category.items)) {
        throw new Error(`Error loading "${category.label}" category. Category items must be array.`);
    }
    const items = category.items.map(item => {
        if (typeof item === 'string') {
            return {
                type: 'doc',
                id: item,
            };
        }
        switch (item.type) {
            case 'category':
                return normalizeCategory(item, level + 1);
            case 'link':
                assertItem(item, ['href', 'label']);
                break;
            case 'ref':
            case 'doc':
                assertItem(item, ['id']);
                break;
            default:
                throw new Error(`Unknown sidebar item type: ${item.type}`);
        }
        return item;
    });
    return Object.assign(Object.assign({}, category), { items });
}
/**
 * Converts sidebars object to mapping to arrays of sidebar item objects
 */
function normalizeSidebar(sidebars) {
    return Object.entries(sidebars).reduce((acc, [sidebarId, sidebar]) => {
        let normalizedSidebar;
        if (!Array.isArray(sidebar)) {
            // convert sidebar to a more generic structure
            normalizedSidebar = Object.entries(sidebar).map(([label, items]) => ({
                type: 'category',
                label,
                items,
            }));
        }
        else {
            normalizedSidebar = sidebar;
        }
        acc[sidebarId] = normalizedSidebar.map(item => normalizeCategory(item));
        return acc;
    }, {});
}
function loadSidebars(sidebarPath) {
    // We don't want sidebars to be cached because of hotreloading.
    let allSidebars = {};
    if (sidebarPath && fs_1.default.existsSync(sidebarPath)) {
        allSidebars = import_fresh_1.default(sidebarPath);
    }
    return normalizeSidebar(allSidebars);
}
exports.default = loadSidebars;
