"use strict";
/**
 * Copyright (c) 2017-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@docusaurus/utils");
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const init_1 = require("./init");
function loadPlugins({ pluginConfigs, context, }) {
    return __awaiter(this, void 0, void 0, function* () {
        // 1. Plugin Lifecycle - Initialization/Constructor
        const plugins = init_1.initPlugins({ pluginConfigs, context });
        // 2. Plugin lifecycle - loadContent
        // Currently plugins run lifecycle in parallel and are not order-dependent. We could change
        // this in future if there are plugins which need to run in certain order or depend on
        // others for data.
        const pluginsLoadedContent = yield Promise.all(plugins.map((plugin) => __awaiter(this, void 0, void 0, function* () {
            if (!plugin.loadContent) {
                return null;
            }
            const content = yield plugin.loadContent();
            return content;
        })));
        // 3. Plugin lifecycle - contentLoaded
        const pluginsRouteConfigs = [];
        yield Promise.all(plugins.map((plugin, index) => __awaiter(this, void 0, void 0, function* () {
            if (!plugin.contentLoaded) {
                return;
            }
            const pluginContentDir = path_1.default.join(context.generatedFilesDir, plugin.name);
            const actions = {
                addRoute: config => pluginsRouteConfigs.push(config),
                createData: (name, content) => __awaiter(this, void 0, void 0, function* () {
                    const modulePath = path_1.default.join(pluginContentDir, name);
                    yield fs_extra_1.default.ensureDir(path_1.default.dirname(modulePath));
                    yield utils_1.generate(pluginContentDir, name, content);
                    return modulePath;
                }),
            };
            yield plugin.contentLoaded({
                content: pluginsLoadedContent[index],
                actions,
            });
        })));
        // Sort the route config. This ensures that route with nested routes is always placed last
        pluginsRouteConfigs.sort((a, b) => {
            if (a.routes && !b.routes) {
                return 1;
            }
            if (!a.routes && b.routes) {
                return -1;
            }
            return a.path > b.path ? 1 : b.path > a.path ? -1 : 0;
        });
        return {
            plugins,
            pluginsRouteConfigs,
        };
    });
}
exports.loadPlugins = loadPlugins;
