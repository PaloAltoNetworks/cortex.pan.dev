"use strict";
/**
 * Copyright (c) 2017-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const index_1 = require("./index");
// Helper methods to setup dummy/fake projects
exports.loadSetup = (name) => __awaiter(void 0, void 0, void 0, function* () {
    const fixtures = path_1.default.join(__dirname, '__tests__', '__fixtures__');
    const simpleSite = path_1.default.join(fixtures, 'simple-site');
    const customSite = path_1.default.join(fixtures, 'custom-site');
    switch (name) {
        case 'custom':
            return index_1.load(customSite);
        case 'simple':
        default:
            return index_1.load(simpleSite);
    }
});
