"use strict";
/**
 * Copyright (c) 2017-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@docusaurus/utils");
const lodash_1 = __importDefault(require("lodash"));
const path_1 = __importDefault(require("path"));
const constants_1 = require("../constants");
const client_modules_1 = require("./client-modules");
const config_1 = require("./config");
const plugins_1 = require("./plugins");
const presets_1 = require("./presets");
const routes_1 = require("./routes");
const themes_1 = require("./themes");
function loadContext(siteDir) {
    const generatedFilesDir = path_1.default.resolve(siteDir, constants_1.GENERATED_FILES_DIR_NAME);
    const siteConfig = config_1.loadConfig(siteDir);
    const outDir = path_1.default.resolve(siteDir, constants_1.BUILD_DIR_NAME);
    const { baseUrl } = siteConfig;
    return {
        siteDir,
        generatedFilesDir,
        siteConfig,
        outDir,
        baseUrl,
    };
}
exports.loadContext = loadContext;
function loadPluginConfigs(context) {
    const { plugins: presetPlugins, themes: presetThemes } = presets_1.loadPresets(context);
    const { siteConfig } = context;
    return [
        ...presetPlugins,
        ...presetThemes,
        // Site config should the highest priority.
        ...(siteConfig.plugins || []),
        ...(siteConfig.themes || []),
    ];
}
exports.loadPluginConfigs = loadPluginConfigs;
function load(siteDir) {
    return __awaiter(this, void 0, void 0, function* () {
        // Context
        const context = loadContext(siteDir);
        const { generatedFilesDir, siteConfig, outDir, baseUrl } = context;
        const genSiteConfig = utils_1.generate(generatedFilesDir, constants_1.CONFIG_FILE_NAME, `export default ${JSON.stringify(siteConfig, null, 2)};`);
        // Plugins
        const pluginConfigs = loadPluginConfigs(context);
        const { plugins, pluginsRouteConfigs } = yield plugins_1.loadPlugins({
            pluginConfigs,
            context,
        });
        // Themes.
        const fallbackTheme = path_1.default.resolve(__dirname, '../client/theme-fallback');
        const pluginThemes = lodash_1.default.compact(plugins.map(plugin => plugin.getThemePath && plugin.getThemePath()));
        const userTheme = path_1.default.resolve(siteDir, constants_1.THEME_PATH);
        const alias = themes_1.loadThemeAlias([fallbackTheme, ...pluginThemes, userTheme]);
        // Make a fake plugin to resolve aliased theme components.
        plugins.push({
            name: 'docusaurus-bootstrap-plugin',
            configureWebpack: () => ({
                resolve: {
                    alias,
                },
            }),
        });
        // Load client modules.
        const clientModules = client_modules_1.loadClientModules(plugins);
        const genClientModules = utils_1.generate(generatedFilesDir, 'client-modules.js', `export default [\n${clientModules
            // import() is async so we use require() because client modules can have
            // CSS and the order matters for loading CSS.
            .map(module => `  require(${JSON.stringify(module)}),`)
            .join('\n')}\n];\n`);
        // Routing
        const { registry, routesChunkNames, routesConfig, routesPaths, } = yield routes_1.loadRoutes(pluginsRouteConfigs);
        const genRegistry = utils_1.generate(generatedFilesDir, 'registry.js', `export default {
${Object.keys(registry)
            .sort()
            .map(key => `  '${key}': [${registry[key].loader}, ${JSON.stringify(registry[key].modulePath)}, require.resolveWeak(${JSON.stringify(registry[key].modulePath)})],`)
            .join('\n')}};\n`);
        const genRoutesChunkNames = utils_1.generate(generatedFilesDir, 'routesChunkNames.json', JSON.stringify(routesChunkNames, null, 2));
        const genRoutes = utils_1.generate(generatedFilesDir, 'routes.js', routesConfig);
        yield Promise.all([
            genClientModules,
            genSiteConfig,
            genRegistry,
            genRoutesChunkNames,
            genRoutes,
        ]);
        const props = {
            siteConfig,
            siteDir,
            outDir,
            baseUrl,
            generatedFilesDir,
            routesPaths,
            plugins,
        };
        return props;
    });
}
exports.load = load;
