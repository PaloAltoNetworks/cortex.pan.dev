"use strict";
/**
 * Copyright (c) 2017-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("@docusaurus/utils");
const chalk_1 = __importDefault(require("chalk"));
const chokidar_1 = __importDefault(require("chokidar"));
const express_1 = __importDefault(require("express"));
const html_webpack_plugin_1 = __importDefault(require("html-webpack-plugin"));
const lodash_1 = __importDefault(require("lodash"));
const path_1 = __importDefault(require("path"));
const portfinder_1 = __importDefault(require("portfinder"));
const openBrowser_1 = __importDefault(require("react-dev-utils/openBrowser"));
const WebpackDevServerUtils_1 = require("react-dev-utils/WebpackDevServerUtils");
const webpack_1 = __importDefault(require("webpack"));
const webpack_dev_server_1 = __importDefault(require("webpack-dev-server"));
const webpack_merge_1 = __importDefault(require("webpack-merge"));
const HotModuleReplacementPlugin_1 = __importDefault(require("webpack/lib/HotModuleReplacementPlugin"));
const server_1 = require("../server");
const utils_2 = require("@docusaurus/utils");
const constants_1 = require("../constants");
const client_1 = require("../webpack/client");
const utils_3 = require("../webpack/utils");
function getHost(reqHost) {
    return reqHost || 'localhost';
}
function getPort(reqPort) {
    return __awaiter(this, void 0, void 0, function* () {
        const basePort = reqPort ? parseInt(reqPort, 10) : constants_1.DEFAULT_PORT;
        const port = yield portfinder_1.default.getPortPromise({ port: basePort });
        return port;
    });
}
function start(siteDir, cliOptions = {}) {
    return __awaiter(this, void 0, void 0, function* () {
        process.env.NODE_ENV = 'development';
        process.env.BABEL_ENV = 'development';
        console.log(chalk_1.default.blue('Starting the development server...'));
        // Process all related files as a prop.
        const props = yield server_1.load(siteDir);
        // Reload files processing.
        const reload = () => {
            server_1.load(siteDir).catch(err => {
                console.error(chalk_1.default.red(err.stack));
            });
        };
        const { siteConfig, plugins = [] } = props;
        const normalizeToSiteDir = filepath => {
            if (filepath && path_1.default.isAbsolute(filepath)) {
                return utils_2.posixPath(path_1.default.relative(siteDir, filepath));
            }
            return utils_2.posixPath(filepath);
        };
        const pluginPaths = lodash_1.default.compact(lodash_1.default.flatten(plugins.map(plugin => plugin.getPathsToWatch && plugin.getPathsToWatch()))).map(normalizeToSiteDir);
        const fsWatcher = chokidar_1.default.watch([...pluginPaths, constants_1.CONFIG_FILE_NAME], {
            cwd: siteDir,
            ignoreInitial: true,
        });
        ['add', 'change', 'unlink', 'addDir', 'unlinkDir'].forEach(event => fsWatcher.on(event, reload));
        const protocol = process.env.HTTPS === 'true' ? 'https' : 'http';
        const port = yield getPort(cliOptions.port);
        const host = getHost(cliOptions.host);
        const { baseUrl } = props;
        const urls = WebpackDevServerUtils_1.prepareUrls(protocol, host, port);
        const openUrl = utils_1.normalizeUrl([urls.localUrlForBrowser, baseUrl]);
        let config = webpack_merge_1.default(client_1.createClientConfig(props), {
            plugins: [
                // Generates an `index.html` file with the <script> injected.
                new html_webpack_plugin_1.default({
                    template: path_1.default.resolve(__dirname, '../client/templates/index.html.template.ejs'),
                    filename: 'index.html',
                    title: siteConfig.title,
                }),
                // This is necessary to emit hot updates for webpack-dev-server
                new HotModuleReplacementPlugin_1.default(),
            ],
        });
        // Plugin lifecycle - configureWebpack
        plugins.forEach(plugin => {
            const { configureWebpack } = plugin;
            if (!configureWebpack) {
                return;
            }
            config = utils_3.applyConfigureWebpack(configureWebpack.bind(plugin), // The plugin lifecycle may reference `this`.
            config, false);
        });
        // https://webpack.js.org/configuration/dev-server
        const devServerConfig = {
            compress: true,
            clientLogLevel: 'error',
            hot: true,
            hotOnly: cliOptions.hotOnly,
            quiet: true,
            headers: {
                'access-control-allow-origin': '*',
            },
            publicPath: baseUrl,
            watchOptions: {
                ignored: /node_modules/,
            },
            historyApiFallback: {
                rewrites: [{ from: /\/*/, to: baseUrl }],
            },
            disableHostCheck: true,
            // Enable overlay on browser. E.g: display errors
            overlay: true,
            host,
            before: app => {
                app.use(baseUrl, express_1.default.static(path_1.default.resolve(siteDir, constants_1.STATIC_DIR_NAME)));
                // TODO: add plugins beforeDevServer and afterDevServer hook
            },
        };
        webpack_dev_server_1.default.addDevServerEntrypoints(config, devServerConfig);
        const compiler = webpack_1.default(config);
        const devServer = new webpack_dev_server_1.default(compiler, devServerConfig);
        devServer.listen(port, host, err => {
            if (err) {
                console.log(err);
            }
            cliOptions.open && openBrowser_1.default(openUrl);
        });
        ['SIGINT', 'SIGTERM'].forEach(sig => {
            process.on(sig, () => {
                devServer.close();
                process.exit();
            });
        });
    });
}
exports.start = start;
