"use strict";
/**
 * Copyright (c) 2017-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const chalk = require("chalk");
const fs_extra_1 = __importDefault(require("fs-extra"));
const import_fresh_1 = __importDefault(require("import-fresh"));
const path_1 = __importDefault(require("path"));
const constants_1 = require("../constants");
const server_1 = require("../server");
function swizzle(siteDir, themeName, componentName) {
    return __awaiter(this, void 0, void 0, function* () {
        const plugin = import_fresh_1.default(themeName);
        const context = server_1.loadContext(siteDir);
        const pluginInstance = plugin(context);
        let fromPath = pluginInstance.getThemePath();
        if (fromPath) {
            let toPath = path_1.default.resolve(siteDir, constants_1.THEME_PATH);
            if (componentName) {
                fromPath = path_1.default.join(fromPath, componentName);
                toPath = path_1.default.join(toPath, componentName);
                // Handle single js file only.
                // E.g: if <fromPath> does not exist, we try to swizzle <fromPath>.js instead
                if (!fs_extra_1.default.existsSync(fromPath) && fs_extra_1.default.existsSync(`${fromPath}.js`)) {
                    [fromPath, toPath] = [`${fromPath}.js`, `${toPath}.js`];
                }
            }
            yield fs_extra_1.default.copy(fromPath, toPath);
            const relativeDir = path_1.default.relative(process.cwd(), toPath);
            const fromMsg = chalk.blue(componentName ? `${themeName} ${chalk.yellow(componentName)}` : themeName);
            const toMsg = chalk.cyan(relativeDir);
            console.log(`\n${chalk.green('Success!')} Copied ${fromMsg} to ${toMsg}.\n`);
        }
    });
}
exports.swizzle = swizzle;
