"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_extra_1 = __importDefault(require("fs-extra"));
const globby_1 = __importDefault(require("globby"));
const path_1 = __importDefault(require("path"));
const feed_1 = require("feed");
const utils_1 = require("@docusaurus/utils");
function truncate(fileString, truncateMarker) {
    const truncated = typeof truncateMarker === 'string'
        ? fileString.includes(truncateMarker)
        : truncateMarker.test(fileString);
    return truncated ? fileString.split(truncateMarker)[0] : fileString;
}
exports.truncate = truncate;
// YYYY-MM-DD-{name}.mdx?
// prefer named capture, but old node version do not support
const FILENAME_PATTERN = /^(\d{4}-\d{1,2}-\d{1,2})-?(.*?).mdx?$/;
function toUrl({ date, link }) {
    return `${date
        .toISOString()
        .substring(0, '2019-01-01'.length)
        .replace(/-/g, '/')}/${link}`;
}
function generateBlogFeed(context, options) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!options.feedOptions) {
            throw new Error('Invalid options - `feedOptions` is not expected to be null.');
        }
        const { siteDir, siteConfig } = context;
        const contentPath = path_1.default.resolve(siteDir, options.path);
        const blogPosts = yield generateBlogPosts(contentPath, context, options);
        if (blogPosts == null) {
            return null;
        }
        const { feedOptions, routeBasePath } = options;
        const { url: siteUrl, title, favicon } = siteConfig;
        const blogBaseUrl = utils_1.normalizeUrl([siteUrl, routeBasePath]);
        const updated = (blogPosts[0] && blogPosts[0].metadata.date) ||
            new Date('2015-10-25T16:29:00.000-07:00');
        const feed = new feed_1.Feed({
            id: blogBaseUrl,
            title: feedOptions.title || `${title} Blog`,
            updated,
            language: feedOptions.language,
            link: blogBaseUrl,
            description: feedOptions.description || `${siteConfig.title} Blog`,
            favicon: utils_1.normalizeUrl([siteUrl, favicon]),
            copyright: feedOptions.copyright,
        });
        blogPosts.forEach(post => {
            const { id, metadata: { title, permalink, date, description }, } = post;
            feed.addItem({
                title,
                id: id,
                link: utils_1.normalizeUrl([siteUrl, permalink]),
                date,
                description,
            });
        });
        return feed;
    });
}
exports.generateBlogFeed = generateBlogFeed;
function generateBlogPosts(blogDir, { siteConfig, siteDir }, options) {
    return __awaiter(this, void 0, void 0, function* () {
        const { include, routeBasePath } = options;
        if (!fs_extra_1.default.existsSync(blogDir)) {
            return null;
        }
        const { baseUrl = '' } = siteConfig;
        const blogFiles = yield globby_1.default(include, {
            cwd: blogDir,
        });
        const blogPosts = [];
        yield Promise.all(blogFiles.map((relativeSource) => __awaiter(this, void 0, void 0, function* () {
            // Cannot use path.join() as it resolves '../' and removes the '@site'. Let webpack loader resolve it.
            const source = path_1.default.join(blogDir, relativeSource);
            const aliasedSource = `@site/${path_1.default.relative(siteDir, source)}`;
            const blogFileName = path_1.default.basename(relativeSource);
            const fileString = yield fs_extra_1.default.readFile(source, 'utf-8');
            const { frontMatter, excerpt } = utils_1.parse(fileString);
            let date;
            // extract date and title from filename
            const match = blogFileName.match(FILENAME_PATTERN);
            let linkName = blogFileName.replace(/\.mdx?$/, '');
            if (match) {
                const [, dateString, name] = match;
                date = new Date(dateString);
                linkName = name;
            }
            // prefer usedefined date
            if (frontMatter.date) {
                date = new Date(frontMatter.date);
            }
            // use file create time for blog
            date = date || (yield fs_extra_1.default.stat(source)).birthtime;
            frontMatter.title = frontMatter.title || linkName;
            blogPosts.push({
                id: frontMatter.id || frontMatter.title,
                metadata: {
                    permalink: utils_1.normalizeUrl([
                        baseUrl,
                        routeBasePath,
                        frontMatter.id || toUrl({ date, link: linkName }),
                    ]),
                    source: aliasedSource,
                    description: frontMatter.description || excerpt,
                    date,
                    tags: frontMatter.tags,
                    title: frontMatter.title,
                },
            });
        })));
        blogPosts.sort((a, b) => b.metadata.date.getTime() - a.metadata.date.getTime());
        return blogPosts;
    });
}
exports.generateBlogPosts = generateBlogPosts;
