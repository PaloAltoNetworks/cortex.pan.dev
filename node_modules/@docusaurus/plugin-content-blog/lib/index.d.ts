import { PluginOptions, BlogTags, BlogContent } from './types';
import { LoadContext, PluginContentLoadedActions, ConfigureWebpackUtils, Props } from '@docusaurus/types';
import { Configuration } from 'webpack';
export default function pluginContentBlog(context: LoadContext, opts: Partial<PluginOptions>): {
    name: string;
    getPathsToWatch(): string[];
    loadContent(): Promise<{
        blogPosts: import("./types").BlogPost[];
        blogListPaginated: {
            metadata: {
                permalink: string;
                page: number;
                postsPerPage: number;
                totalPages: number;
                totalCount: number;
                previousPage: string | null;
                nextPage: string | null;
            };
            items: string[];
        }[];
        blogTags: BlogTags;
        blogTagsListPath: string | null;
    } | null>;
    contentLoaded({ content: blogContents, actions, }: {
        content: BlogContent;
        actions: PluginContentLoadedActions;
    }): Promise<void>;
    configureWebpack(_config: Configuration, isServer: boolean, { getBabelLoader, getCacheLoader }: ConfigureWebpackUtils): {
        resolve: {
            alias: {
                '@docusaurus-plugin-content-blog': string;
            };
        };
        module: {
            rules: {
                test: RegExp;
                include: string[];
                use: (string | import("webpack").NewLoader | null)[];
            }[];
        };
    };
    postBuild({ outDir }: Props): Promise<void>;
};
//# sourceMappingURL=index.d.ts.map