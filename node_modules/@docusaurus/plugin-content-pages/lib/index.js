"use strict";
/**
 * Copyright (c) 2017-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const globby_1 = __importDefault(require("globby"));
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const utils_1 = require("@docusaurus/utils");
const DEFAULT_OPTIONS = {
    path: 'src/pages',
    routeBasePath: '',
    include: ['**/*.{js,jsx}'],
};
function pluginContentPages(context, opts) {
    const options = Object.assign(Object.assign({}, DEFAULT_OPTIONS), opts);
    const contentPath = path_1.default.resolve(context.siteDir, options.path);
    return {
        name: 'docusaurus-plugin-content-pages',
        getPathsToWatch() {
            const { include = [] } = options;
            const globPattern = include.map(pattern => `${contentPath}/${pattern}`);
            return [...globPattern];
        },
        loadContent() {
            return __awaiter(this, void 0, void 0, function* () {
                const { include } = options;
                const { siteConfig, siteDir } = context;
                const pagesDir = contentPath;
                if (!fs_1.default.existsSync(pagesDir)) {
                    return null;
                }
                const { baseUrl } = siteConfig;
                const pagesFiles = yield globby_1.default(include, {
                    cwd: pagesDir,
                });
                return pagesFiles.map(relativeSource => {
                    const source = path_1.default.join(pagesDir, relativeSource);
                    // Cannot use path.join() as it resolves '../' and removes the '@site'. Let webpack loader resolve it.
                    const aliasedSource = `@site/${path_1.default.relative(siteDir, source)}`;
                    const pathName = utils_1.encodePath(utils_1.fileToPath(relativeSource));
                    // Default Language.
                    return {
                        permalink: pathName.replace(/^\//, baseUrl || ''),
                        source: aliasedSource,
                    };
                });
            });
        },
        contentLoaded({ content, actions }) {
            return __awaiter(this, void 0, void 0, function* () {
                if (!content) {
                    return;
                }
                const { addRoute } = actions;
                yield Promise.all(content.map((metadataItem) => __awaiter(this, void 0, void 0, function* () {
                    const { permalink, source } = metadataItem;
                    addRoute({
                        path: permalink,
                        component: source,
                        exact: true,
                    });
                })));
            });
        },
    };
}
exports.default = pluginContentPages;
