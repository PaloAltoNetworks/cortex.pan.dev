"use strict";
/**
 * Copyright (c) 2017-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const createSitemap_1 = __importDefault(require("./createSitemap"));
const DEFAULT_OPTIONS = {
    cacheTime: 600 * 1000,
    changefreq: 'weekly',
    priority: 0.5,
};
function pluginSitemap(_context, opts) {
    const options = Object.assign(Object.assign({}, DEFAULT_OPTIONS), opts);
    return {
        name: 'docusaurus-plugin-sitemap',
        postBuild({ siteConfig, routesPaths, outDir }) {
            return __awaiter(this, void 0, void 0, function* () {
                // Generate sitemap
                const generatedSitemap = createSitemap_1.default(siteConfig, routesPaths, options).toString();
                // Write sitemap file
                const sitemapPath = path_1.default.join(outDir, 'sitemap.xml');
                fs_1.default.writeFile(sitemapPath, generatedSitemap, err => {
                    if (err) {
                        throw new Error(`Sitemap error: ${err}`);
                    }
                });
            });
        },
    };
}
exports.default = pluginSitemap;
