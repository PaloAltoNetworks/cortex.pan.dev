"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _netlifyCmsBackendGithub = require("netlify-cms-backend-github");

var _netlifyCmsLibUtil = require("netlify-cms-lib-util");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class API extends _netlifyCmsBackendGithub.API {
  constructor(config) {
    super(config);
    this.api_root = config.api_root;
    this.tokenPromise = config.tokenPromise;
    this.commitAuthor = config.commitAuthor;
    this.repoURL = '';
    this.originRepoURL = '';
  }

  hasWriteAccess() {
    return this.getBranch().then(() => true).catch(error => {
      if (error.status === 401) {
        if (error.message === 'Bad credentials') {
          throw new _netlifyCmsLibUtil.APIError('Git Gateway Error: Please ask your site administrator to reissue the Git Gateway token.', error.status, 'Git Gateway');
        } else {
          return false;
        }
      } else if (error.status === 404 && (error.message === undefined || error.message === 'Unable to locate site configuration')) {
        throw new _netlifyCmsLibUtil.APIError("Git Gateway Error: Please make sure Git Gateway is enabled on your site.", error.status, 'Git Gateway');
      } else {
        console.error('Problem fetching repo data from Git Gateway');
        throw error;
      }
    });
  }

  getRequestHeaders() {
    let headers = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return this.tokenPromise().then(jwtToken => {
      const baseHeader = _objectSpread({
        Authorization: "Bearer ".concat(jwtToken),
        'Content-Type': 'application/json'
      }, headers);

      return baseHeader;
    });
  }

  urlFor(path, options) {
    const cacheBuster = new Date().getTime();
    const params = ["ts=".concat(cacheBuster)];

    if (options.params) {
      for (const key in options.params) {
        params.push("".concat(key, "=").concat(encodeURIComponent(options.params[key])));
      }
    }

    if (params.length) {
      path += "?".concat(params.join('&'));
    }

    return this.api_root + path;
  }

  user() {
    return Promise.resolve(this.commitAuthor);
  }

  request(path) {
    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    let parseResponse = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : response => this.parseResponse(response);
    const url = this.urlFor(path, options);
    let responseStatus;
    return this.getRequestHeaders(options.headers || {}).then(headers => fetch(url, _objectSpread({}, options, {
      headers
    }))).then(response => {
      responseStatus = response.status;
      return parseResponse(response);
    }).catch(error => {
      throw new _netlifyCmsLibUtil.APIError(error.message || error.msg, responseStatus, 'Git Gateway');
    });
  }

  commit(message, changeTree) {
    const commitParams = {
      message,
      tree: changeTree.sha,
      parents: changeTree.parentSha ? [changeTree.parentSha] : []
    };

    if (this.commitAuthor) {
      commitParams.author = _objectSpread({}, this.commitAuthor, {
        date: new Date().toISOString()
      });
    }

    return this.request('/git/commits', {
      method: 'POST',
      body: JSON.stringify(commitParams)
    });
  }

}

exports.default = API;