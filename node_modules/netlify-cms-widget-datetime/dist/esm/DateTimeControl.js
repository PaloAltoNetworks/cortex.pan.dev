"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _core = require("@emotion/core");

var _reactDatetime = _interopRequireDefault(require("react-datetime/css/react-datetime.css"));

var _reactDatetime2 = _interopRequireDefault(require("react-datetime"));

var _moment = _interopRequireDefault(require("moment"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class DateTimeControl extends _react.default.Component {
  constructor() {
    super(...arguments);

    _defineProperty(this, "formats", this.getFormats());

    _defineProperty(this, "isValidDate", datetime => _moment.default.isMoment(datetime) || datetime instanceof Date || datetime === '');

    _defineProperty(this, "handleChange", datetime => {
      /**
       * Set the date only if it is valid.
       */
      if (!this.isValidDate(datetime)) {
        return;
      }

      const {
        onChange
      } = this.props;
      const {
        format
      } = this.formats;
      /**
       * Produce a formatted string only if a format is set in the config.
       * Otherwise produce a date object.
       */

      if (format) {
        const formattedValue = datetime ? (0, _moment.default)(datetime).format(format) : '';
        onChange(formattedValue);
      } else {
        const value = _moment.default.isMoment(datetime) ? datetime.toDate() : datetime;
        onChange(value);
      }
    });

    _defineProperty(this, "onBlur", datetime => {
      const {
        setInactiveStyle
      } = this.props;

      if (!this.isValidDate(datetime)) {
        const parsedDate = (0, _moment.default)(datetime);

        if (parsedDate.isValid()) {
          this.handleChange(datetime);
        } else {
          window.alert('The date you entered is invalid.');
        }
      }

      setInactiveStyle();
    });
  }

  getFormats() {
    const {
      field
    } = this.props;
    const format = field.get('format'); // dateFormat and timeFormat are strictly for modifying
    // input field with the date/time pickers

    const dateFormat = field.get('dateFormat'); // show time-picker? false hides it, true shows it using default format

    let timeFormat = field.get('timeFormat');

    if (typeof timeFormat === 'undefined') {
      timeFormat = true;
    }

    return {
      format,
      dateFormat,
      timeFormat
    };
  }

  componentDidMount() {
    const {
      value
    } = this.props;
    /**
     * Set the current date as default value if no default value is provided. An
     * empty string means the value is intentionally blank.
     */

    if (!value && value !== '') {
      setTimeout(() => {
        this.handleChange(new Date());
      }, 0);
    }
  } // Date is valid if datetime is a moment or Date object otherwise it's a string.
  // Handle the empty case, if the user wants to empty the field.


  render() {
    const {
      forID,
      value,
      classNameWrapper,
      setActiveStyle
    } = this.props;
    const {
      format,
      dateFormat,
      timeFormat
    } = this.formats;
    return (0, _core.jsx)("div", {
      css:
      /*#__PURE__*/
      (0, _core.css)(_reactDatetime.default, ";;label:DateTimeControl;" + (process.env.NODE_ENV === "production" ? "" : "/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9EYXRlVGltZUNvbnRyb2wuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBeUdnQiIsImZpbGUiOiIuLi8uLi9zcmMvRGF0ZVRpbWVDb250cm9sLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqIEBqc3gganN4ICovXG5pbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tICdwcm9wLXR5cGVzJztcbmltcG9ydCB7IGpzeCwgY3NzIH0gZnJvbSAnQGVtb3Rpb24vY29yZSc7XG5pbXBvcnQgcmVhY3REYXRlVGltZVN0eWxlcyBmcm9tICdyZWFjdC1kYXRldGltZS9jc3MvcmVhY3QtZGF0ZXRpbWUuY3NzJztcbmltcG9ydCBEYXRlVGltZSBmcm9tICdyZWFjdC1kYXRldGltZSc7XG5pbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIERhdGVUaW1lQ29udHJvbCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBwcm9wVHlwZXMgPSB7XG4gICAgZmllbGQ6IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCxcbiAgICBmb3JJRDogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBvbkNoYW5nZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICBjbGFzc05hbWVXcmFwcGVyOiBQcm9wVHlwZXMuc3RyaW5nLmlzUmVxdWlyZWQsXG4gICAgc2V0QWN0aXZlU3R5bGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWQsXG4gICAgc2V0SW5hY3RpdmVTdHlsZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICB2YWx1ZTogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLm9iamVjdCwgUHJvcFR5cGVzLnN0cmluZ10pLFxuICB9O1xuXG4gIGdldEZvcm1hdHMoKSB7XG4gICAgY29uc3QgeyBmaWVsZCB9ID0gdGhpcy5wcm9wcztcbiAgICBjb25zdCBmb3JtYXQgPSBmaWVsZC5nZXQoJ2Zvcm1hdCcpO1xuXG4gICAgLy8gZGF0ZUZvcm1hdCBhbmQgdGltZUZvcm1hdCBhcmUgc3RyaWN0bHkgZm9yIG1vZGlmeWluZ1xuICAgIC8vIGlucHV0IGZpZWxkIHdpdGggdGhlIGRhdGUvdGltZSBwaWNrZXJzXG4gICAgY29uc3QgZGF0ZUZvcm1hdCA9IGZpZWxkLmdldCgnZGF0ZUZvcm1hdCcpO1xuICAgIC8vIHNob3cgdGltZS1waWNrZXI/IGZhbHNlIGhpZGVzIGl0LCB0cnVlIHNob3dzIGl0IHVzaW5nIGRlZmF1bHQgZm9ybWF0XG4gICAgbGV0IHRpbWVGb3JtYXQgPSBmaWVsZC5nZXQoJ3RpbWVGb3JtYXQnKTtcbiAgICBpZiAodHlwZW9mIHRpbWVGb3JtYXQgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aW1lRm9ybWF0ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgZm9ybWF0LFxuICAgICAgZGF0ZUZvcm1hdCxcbiAgICAgIHRpbWVGb3JtYXQsXG4gICAgfTtcbiAgfVxuXG4gIGZvcm1hdHMgPSB0aGlzLmdldEZvcm1hdHMoKTtcblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICBjb25zdCB7IHZhbHVlIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgLyoqXG4gICAgICogU2V0IHRoZSBjdXJyZW50IGRhdGUgYXMgZGVmYXVsdCB2YWx1ZSBpZiBubyBkZWZhdWx0IHZhbHVlIGlzIHByb3ZpZGVkLiBBblxuICAgICAqIGVtcHR5IHN0cmluZyBtZWFucyB0aGUgdmFsdWUgaXMgaW50ZW50aW9uYWxseSBibGFuay5cbiAgICAgKi9cbiAgICBpZiAoIXZhbHVlICYmIHZhbHVlICE9PSAnJykge1xuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMuaGFuZGxlQ2hhbmdlKG5ldyBEYXRlKCkpO1xuICAgICAgfSwgMCk7XG4gICAgfVxuICB9XG5cbiAgLy8gRGF0ZSBpcyB2YWxpZCBpZiBkYXRldGltZSBpcyBhIG1vbWVudCBvciBEYXRlIG9iamVjdCBvdGhlcndpc2UgaXQncyBhIHN0cmluZy5cbiAgLy8gSGFuZGxlIHRoZSBlbXB0eSBjYXNlLCBpZiB0aGUgdXNlciB3YW50cyB0byBlbXB0eSB0aGUgZmllbGQuXG4gIGlzVmFsaWREYXRlID0gZGF0ZXRpbWUgPT5cbiAgICBtb21lbnQuaXNNb21lbnQoZGF0ZXRpbWUpIHx8IGRhdGV0aW1lIGluc3RhbmNlb2YgRGF0ZSB8fCBkYXRldGltZSA9PT0gJyc7XG5cbiAgaGFuZGxlQ2hhbmdlID0gZGF0ZXRpbWUgPT4ge1xuICAgIC8qKlxuICAgICAqIFNldCB0aGUgZGF0ZSBvbmx5IGlmIGl0IGlzIHZhbGlkLlxuICAgICAqL1xuICAgIGlmICghdGhpcy5pc1ZhbGlkRGF0ZShkYXRldGltZSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBjb25zdCB7IG9uQ2hhbmdlIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgZm9ybWF0IH0gPSB0aGlzLmZvcm1hdHM7XG5cbiAgICAvKipcbiAgICAgKiBQcm9kdWNlIGEgZm9ybWF0dGVkIHN0cmluZyBvbmx5IGlmIGEgZm9ybWF0IGlzIHNldCBpbiB0aGUgY29uZmlnLlxuICAgICAqIE90aGVyd2lzZSBwcm9kdWNlIGEgZGF0ZSBvYmplY3QuXG4gICAgICovXG4gICAgaWYgKGZvcm1hdCkge1xuICAgICAgY29uc3QgZm9ybWF0dGVkVmFsdWUgPSBkYXRldGltZSA/IG1vbWVudChkYXRldGltZSkuZm9ybWF0KGZvcm1hdCkgOiAnJztcbiAgICAgIG9uQ2hhbmdlKGZvcm1hdHRlZFZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgdmFsdWUgPSBtb21lbnQuaXNNb21lbnQoZGF0ZXRpbWUpID8gZGF0ZXRpbWUudG9EYXRlKCkgOiBkYXRldGltZTtcbiAgICAgIG9uQ2hhbmdlKHZhbHVlKTtcbiAgICB9XG4gIH07XG5cbiAgb25CbHVyID0gZGF0ZXRpbWUgPT4ge1xuICAgIGNvbnN0IHsgc2V0SW5hY3RpdmVTdHlsZSB9ID0gdGhpcy5wcm9wcztcblxuICAgIGlmICghdGhpcy5pc1ZhbGlkRGF0ZShkYXRldGltZSkpIHtcbiAgICAgIGNvbnN0IHBhcnNlZERhdGUgPSBtb21lbnQoZGF0ZXRpbWUpO1xuXG4gICAgICBpZiAocGFyc2VkRGF0ZS5pc1ZhbGlkKCkpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVDaGFuZ2UoZGF0ZXRpbWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2luZG93LmFsZXJ0KCdUaGUgZGF0ZSB5b3UgZW50ZXJlZCBpcyBpbnZhbGlkLicpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHNldEluYWN0aXZlU3R5bGUoKTtcbiAgfTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBmb3JJRCwgdmFsdWUsIGNsYXNzTmFtZVdyYXBwZXIsIHNldEFjdGl2ZVN0eWxlIH0gPSB0aGlzLnByb3BzO1xuICAgIGNvbnN0IHsgZm9ybWF0LCBkYXRlRm9ybWF0LCB0aW1lRm9ybWF0IH0gPSB0aGlzLmZvcm1hdHM7XG4gICAgcmV0dXJuIChcbiAgICAgIDxkaXZcbiAgICAgICAgY3NzPXtjc3NgXG4gICAgICAgICAgJHtyZWFjdERhdGVUaW1lU3R5bGVzfTtcbiAgICAgICAgYH1cbiAgICAgID5cbiAgICAgICAgPERhdGVUaW1lXG4gICAgICAgICAgZGF0ZUZvcm1hdD17ZGF0ZUZvcm1hdH1cbiAgICAgICAgICB0aW1lRm9ybWF0PXt0aW1lRm9ybWF0fVxuICAgICAgICAgIHZhbHVlPXttb21lbnQodmFsdWUsIGZvcm1hdCl9XG4gICAgICAgICAgb25DaGFuZ2U9e3RoaXMuaGFuZGxlQ2hhbmdlfVxuICAgICAgICAgIG9uRm9jdXM9e3NldEFjdGl2ZVN0eWxlfVxuICAgICAgICAgIG9uQmx1cj17dGhpcy5vbkJsdXJ9XG4gICAgICAgICAgaW5wdXRQcm9wcz17eyBjbGFzc05hbWU6IGNsYXNzTmFtZVdyYXBwZXIsIGlkOiBmb3JJRCB9fVxuICAgICAgICAvPlxuICAgICAgPC9kaXY+XG4gICAgKTtcbiAgfVxufVxuIl19 */"))
    }, (0, _core.jsx)(_reactDatetime2.default, {
      dateFormat: dateFormat,
      timeFormat: timeFormat,
      value: (0, _moment.default)(value, format),
      onChange: this.handleChange,
      onFocus: setActiveStyle,
      onBlur: this.onBlur,
      inputProps: {
        className: classNameWrapper,
        id: forID
      }
    }));
  }

}

exports.default = DateTimeControl;

_defineProperty(DateTimeControl, "propTypes", {
  field: _propTypes.default.object.isRequired,
  forID: _propTypes.default.string,
  onChange: _propTypes.default.func.isRequired,
  classNameWrapper: _propTypes.default.string.isRequired,
  setActiveStyle: _propTypes.default.func.isRequired,
  setInactiveStyle: _propTypes.default.func.isRequired,
  value: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string])
});